const CLIENT_ID="qn0wimnszbqlwfnszdz3wwfz430eqr";let voters=[],elements={grid:document.getElementById("grid"),gameDiv:document.getElementById("gameDiv"),loginExpiredModal:document.getElementById("loginExpiredModal"),loginExpiredRenew:document.getElementById("loginExpiredRenew"),loginExpiredReset:document.getElementById("loginExpiredReset"),aboutModal:document.getElementById("aboutModal"),vtsLink:document.getElementById("vtsLink"),status:document.getElementById("status"),topRight:document.getElementById("topRight"),loginButton:document.getElementById("loginButton"),channelName:document.getElementById("channelName"),connectbtn:document.getElementById("connectbtn"),darkTheme:document.getElementById("darkTheme"),toastContainer:document.getElementById("toastContainer")};const spinner='<div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>';let loginButton,loginExpiredModal,aboutModal,darkTheme=!0,USER={channel:"",twitchLogin:!1,access_token:"",userID:"",platform:""};function refreshData(){darkTheme=elements.darkTheme.checked??!0,USER.twitchLogin||(USER.channel=elements.channelName.value.replace(/\s+/g,"").toLowerCase(),USER.platform="twitch")}function saveSettings(){refreshData(),localStorage.setItem("USER",JSON.stringify(USER)),localStorage.setItem("darkTheme",darkTheme)}function load_localStorage(){localStorage.getItem("USER")&&(USER=JSON.parse(localStorage.getItem("USER")),elements.channelName.value=USER.channel)}function resetSettings(){return localStorage.setItem("USER",JSON.stringify({channel:"",twitchLogin:!1,access_token:"",userID:"",platform:""})),location.reload(),!1}function login(){return elements.topRight.innerHTML='<div class="btn-group" role="group" aria-label="log in button group">\n    <button type="button" class="btn btn-twitch"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></button>\n    <div class="btn-group" role="group">\n        <button id="btnGroupDropLogin" type="button" class="btn btn-twitch dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">\n      </button>\n        <ul class="dropdown-menu dropdown-menu-lg-end" aria-labelledby="btnGroupDrop1">\n            <li><a class="dropdown-item" onclick="logout()" href="#"><i class="material-icons notranslate">logout</i>Log out</a></li>\n        </ul>\n    </div>\n</div>',window.open("/prompt.html","loginWindow","toolbar=0,status=0,scrollbars=0,width=500px,height=800px"),!1}function connect(){elements.status.innerHTML='\n  <h4>\n  <span class="badge bg-warning">Connecting... \n  <div class="spinner-border" style="width:18px;height:18px;" role="status"><span class="visually-hidden">Loading...</span></div>\n  </span>\n  </h4>',elements.topRight.innerHTML='\n  <div class="btn-group" role="group" aria-label="log in button group">\n  <button type="button" class="btn btn-twitch"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></button>\n  <div class="btn-group" role="group">\n  <button id="btnGroupDropLogin" type="button" class="btn btn-twitch dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"></button>\n  <ul class="dropdown-menu dropdown-menu-lg-end" aria-labelledby="btnGroupDrop1">\n  <li><a class="dropdown-item" onclick="logout()" href="#"><i class="material-icons notranslate">logout</i>Log out</a></li>\n  </ul>\n  </div>\n  </div>',refreshData();let e={options:{clientId:CLIENT_ID,debug:!1},connection:{secure:!0,reconnect:!0},channels:[USER.channel]};client=new tmi.client(e),client.on("message",(async(e,n,t,o)=>{let s=t.split(" ").filter(Boolean);if(!WORDLE.nwstarted&&!voters.includes(n.username)){if(!s[0])return;let e=s[0].toLowerCase();if(0==WORDLE.words.length&&await loadwords(),!WORDLE.verifywords)return void addWord(e,n.username);if(WORDLE.words.includes(e))return void addWord(e,n.username)}})),client.on("timeout",((e,n,t,o,s)=>{})),client.on("connected",(async(e,n)=>{elements.status.innerHTML='<h4><span class="badge bg-success">Connected :)</span></h4>',saveSettings(),sendUsername("chat.vote/games/wordle",USER.channel,"twitch"==USER.platform?`twitch - ${USER.twitchLogin}`:"youtube"),await checkTags(USER.userID,USER.access_token)&&(elements.vtsLink.style.display=""),loadPFP()})),client.on("disconnected",(e=>{elements.status.innerHTML=`<h4><span class="badge bg-danger">Disconnected: ${e}</span></h4>`})),client.on("notice",((e,n,t)=>{elements.status.innerHTML=`<h4><span class="badge bg-danger">Disconnected: ${t}</span></h4>`})),client.connect().catch(console.error)}async function loadPFP(){if(!USER.channel)return void(elements.topRight.innerHTML=' <div class="btn-group" role="group" aria-label="login options">\n    <a\n      role="button"\n      id="loginButton"\n      class="btn btn-twitch"\n      tabindex="0"\n      data-bs-container="body"\n      data-bs-custom-class="custom-popover"\n      data-bs-placement="bottom"\n      data-bs-trigger="manual"\n      data-bs-toggle="popover"\n      data-bs-title="Not signed in"\n      data-bs-content="You need sign in first before adding options or enabling voting/suggestions"\n      ><span class="twitch-icon"></span>Sign in with Twitch</a\n    >\n    <div class="btn-group" role="group">\n      <button\n        id="btnGroupDropLogin"\n        type="button"\n        class="btn btn-twitch dropdown-toggle"\n        data-bs-toggle="dropdown"\n        data-bs-auto-close="outside"\n        aria-label="other login option, connect manually"\n        aria-expanded="false"\n      ></button>\n      <div class="dropdown-menu dropdown-menu-end" aria-labelledby="btnGroupDropLogin">\n        <div class="p-3" style="width: 300px">\n          <label for="channelName" class="form-label">Connect to chat directly</label>\n          <div class="input-group mb-3">\n            <span class="input-group-text" id="directLoginChannel">twitch.tv/</span>\n            <input type="text" class="form-control" id="channelName" aria-describedby="directLoginChannel" />\n          </div>\n          <small class="text-body-secondary">Some features will not be available if you connect directly</small><br />\n          <button type="button" id="connectbtn" class="btn btn-primary float-end">Connect</button>\n        </div>\n      </div>\n    </div>\n  </div>');let e=await get7TVPFP(USER.userID);"/pics/donk.png"==e&&USER.access_token&&(e=await getTwitchPFP(USER.channel,USER.access_token)),elements.topRight.innerHTML=`\n  <div class="btn-group" role="group" aria-label="Button group with nested dropdown">\n  <button type="button" id="btnGroupDrop2" class="btn btn-${darkTheme?"dark":"secondary"}"><img src="${e}" alt="profile pic" style="height:2em;"></button>\n  <div class="btn-group" role="group">\n  <button id="btnGroupDrop1" type="button" class="btn btn-${darkTheme?"dark":"secondary"} dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">\n  ${USER.channel}\n  </button>\n  <ul class="dropdown-menu dropdown-menu-lg-end" aria-labelledby="btnGroupDrop1">\n  <li><a class="dropdown-item" onclick="logout()" href="#"><i class="material-icons notranslate">logout</i>Log out</a></li>\n  </ul>\n  </div>\n  </div>`}function checkLogin(){return!!USER.channel||(loginButton.show(),setTimeout((function(){loginButton.hide()}),4e3),!1)}function logout(){elements.topRight.innerHTML=' <div class="btn-group" role="group" aria-label="login options">\n  <a\n    role="button"\n    id="loginButton"\n    class="btn btn-twitch"\n    tabindex="0"\n    data-bs-container="body"\n    data-bs-custom-class="custom-popover"\n    data-bs-placement="bottom"\n    data-bs-trigger="manual"\n    data-bs-toggle="popover"\n    data-bs-title="Not signed in"\n    data-bs-content="You need sign in first before adding options or enabling voting/suggestions"\n    ><span class="twitch-icon"></span>Sign in with Twitch</a\n  >\n  <div class="btn-group" role="group">\n    <button\n      id="btnGroupDropLogin"\n      type="button"\n      class="btn btn-twitch dropdown-toggle"\n      data-bs-toggle="dropdown"\n      data-bs-auto-close="outside"\n      aria-label="other login option, connect manually"\n      aria-expanded="false"\n    ></button>\n    <div class="dropdown-menu dropdown-menu-end" aria-labelledby="btnGroupDropLogin">\n      <div class="p-3" style="width: 300px">\n        <label for="channelName" class="form-label">Connect to chat directly</label>\n        <div class="input-group mb-3">\n          <span class="input-group-text" id="directLoginChannel">twitch.tv/</span>\n          <input type="text" class="form-control" id="channelName" aria-describedby="directLoginChannel" />\n        </div>\n        <small class="text-body-secondary">Some features will not be available if you connect directly</small><br />\n        <button type="button" id="connectbtn" class="btn btn-primary float-end">Connect</button>\n      </div>\n    </div>\n  </div>\n</div>',resetSettings()}function switchTheme(e){document.documentElement.setAttribute("data-bs-theme",e?"dark":"light"),document.getElementById("twitchLogo").style.filter=`invert(${e?.25:.65})`,document.getElementById("btnGroupDrop1")&&document.getElementById("btnGroupDrop2")&&(document.getElementById("btnGroupDrop1").classList.remove(""+(e?"btn-secondary":"btn-dark")),document.getElementById("btnGroupDrop1").classList.add(""+(e?"btn-dark":"btn-secondary")),document.getElementById("btnGroupDrop2").classList.remove(""+(e?"btn-secondary":"btn-dark")),document.getElementById("btnGroupDrop2").classList.add(""+(e?"btn-dark":"btn-secondary")))}async function loadAndConnect(){load_localStorage(),refreshData();const e=new Proxy(new URLSearchParams(window.location.search),{get:(e,n)=>e.get(n)});if(e.channel&&!USER.channel&&!USER.twitchLogin&&!USER.access_token&&!USER.userID){let n=e.channel.replace(/\s+/g,"").toLowerCase();elements.channelName.value=n,USER.channel=n,window.history.replaceState({},document.title,"/")}if(USER.twitchLogin&&!await checkToken(USER.access_token))return USER.channel="",void loginExpiredModal.show();USER.channel&&connect()}function toggleGrid(){elements.grid.style.display="none"==elements.grid.style.display?"":"none",elements.gameDiv.style.display=""==elements.gameDiv.style.display?"none":""}window.onload=function(){darkTheme="true"===(localStorage.getItem("darkTheme")||"true"),elements.darkTheme.checked=darkTheme??!0,switchTheme(elements.darkTheme.checked),loadAndConnect(),USER.channel||(loginButton=new bootstrap.Popover(elements.loginButton)),loginExpiredModal=new bootstrap.Modal(elements.loginExpiredModal),aboutModal=new bootstrap.Modal(elements.aboutModal),enableTooltips(),enablePopovers(),elements.channelName.addEventListener("keydown",(e=>{"Enter"===e.key&&connect()})),elements.connectbtn.addEventListener("click",(function(){connect()})),elements.loginExpiredRenew.addEventListener("click",(function(){login()})),elements.loginButton.addEventListener("click",(function(){login()})),elements.loginExpiredReset.addEventListener("click",(function(){resetSettings()})),elements.darkTheme.onchange=function(){switchTheme(this.checked),saveSettings()},listeners(),shownw()},window.onbeforeunload=function(){return null};let WORDLE={nwletter:0,nwrow:0,nwword:[],nwusers:"",nwstarted:!1,wordList:[],wordlength:5,guesslimit:6,multiword:!1,verifywords:!0,words:[]};function addWord(e,n){if((e=validator.escape(e).toLowerCase()).length!=WORDLE.wordlength)return;let t=WORDLE.wordList.findIndex((n=>n.word===e));-1==t?WORDLE.wordList.push({word:e,usernames:[n]}):WORDLE.wordList[t].usernames.push(n),WORDLE.multiword||voters.push(n),document.getElementById("wordcount").innerHTML=`Submitted words: ${WORDLE.wordList.length}`}function startnw(){if(WORDLE.wordList.length<2)return void showToast("Chat needs to submit at least 2 words before you can start.","warning",6e3);showToast("A random word has been picked from chat's suggestions. Start guessing :)","success",6e3),document.getElementById("nwoutput2").innerHTML="",shownw(),WORDLE.nwletter=0,WORDLE.nwrow=0;let e=WORDLE.wordList[Math.floor(Math.random()*WORDLE.wordList.length)];WORDLE.nwword=e.word.split(""),WORDLE.nwusers=e.usernames.join(", "),WORDLE.nwstarted=!0,WORDLE.wordList=WORDLE.wordList.filter((n=>n.word!==e.word)),document.getElementById("wordcount").innerHTML=`Submitted words: ${WORDLE.wordList.length}`,document.getElementById("startnw").style.display="none",document.getElementById("resetnw").style.display="block"}function reset(){document.getElementById("startnw").style.display="block",document.getElementById("resetnw").style.display="none",WORDLE.wordList=[],document.getElementById("wordcount").innerHTML="Submitted words: 0",document.getElementById("nwoutput").innerHTML="",document.getElementById("nwoutput2").innerHTML="",WORDLE.nwletter=0,WORDLE.nwrow=0,WORDLE.nwword=[],WORDLE.nwusers="",WORDLE.words=[],WORDLE.nwstarted=!1,shownw()}function shownw(){let e=0,n='<div class="container nwwrapper">';for(let t=0;t<WORDLE.guesslimit;t++){n+='<div class="row nwrows">';for(let t=0;t<WORDLE.wordlength;t++)n+=`<div class="col nwsquare" id="nw${e}"></div>`,e++;n+="</div>"}n+="</div>",document.getElementById("nwoutput").innerHTML=n}async function loadwords(){const e=await fetch(`/games/wordle/words/${WORDLE.wordlength}.json`),n=await e.json();WORDLE.words=Object.keys(n)}function listeners(){document.getElementById("multiword").onchange=function(){voters=[],WORDLE.multiword=this.checked},document.getElementById("verifywords").onchange=function(){WORDLE.verifywords=this.checked,WORDLE.verifywords&&resetGame()},document.addEventListener("keydown",(function(e){if(WORDLE.wordList.length<1||!WORDLE.nwstarted)return;let n=0;if("Enter"==e.key){let e=[],t=[...WORDLE.nwword];for(let n=0;n<WORDLE.wordlength;n++)e.push(document.getElementById(`nw${WORDLE.nwrow*WORDLE.wordlength+n}`).innerHTML.toLowerCase());if(e.includes(""))return;if(WORDLE.verifywords&&!WORDLE.words.includes(e.join("")))return void showToast(`"${e.join("")}" is not a word <img src="/pics/donk.png" alt="donk" style="height:24px; width:24px;">`,"danger",3e3);for(let e=0;e<WORDLE.wordlength;e++)document.getElementById(`nw${WORDLE.nwrow*WORDLE.wordlength+e}`).style.backgroundColor="black";for(let o=0;o<WORDLE.wordlength;o++)if(e[o]==WORDLE.nwword[o]){document.getElementById(`nw${WORDLE.nwrow*WORDLE.wordlength+o}`).style.backgroundColor="green";let s=t.indexOf(e[o]);s>-1&&t.splice(s,1),n++,n==WORDLE.wordlength&&(WORDLE.nwstarted=!1,document.getElementById("resetnw").style.display="none",document.getElementById("nwoutput2").innerHTML=`\n            <h2>Word guessed correctly!</h2>\n            <p>word submitted by: ${WORDLE.nwusers}</p>\n            <button type="button" onclick="startnw()" class="btn btn-success">Pick another word</button>\n            <button type="button" onclick="resetGame()" class="btn btn-warning">Reset</button>`)}for(let n=0;n<WORDLE.wordlength;n++)if(t.includes(e[n])&&"green"!=document.getElementById(`nw${WORDLE.nwrow*WORDLE.wordlength+n}`).style.backgroundColor){document.getElementById(`nw${WORDLE.nwrow*WORDLE.wordlength+n}`).style.backgroundColor="orange";let o=t.indexOf(e[n]);o>-1&&t.splice(o,1)}WORDLE.nwrow++,WORDLE.nwrow==WORDLE.guesslimit&&(document.getElementById("nwoutput2").innerHTML=`\n        <h2>No more guesses left</h2>\n        <h2>Word: ${WORDLE.nwword.join("")}</h2>\n        <p>word submitted by: ${WORDLE.nwusers}</p>\n        <button type="button" onclick="startnw()" class="btn btn-success">Pick another word</button>\n        <button type="button" onclick="resetGame()" class="btn btn-warning">Reset</button>`,WORDLE.nwstarted=!1)}"Backspace"==e.key&&WORDLE.nwletter-WORDLE.nwrow*WORDLE.wordlength>0&&(document.getElementById("nw"+(WORDLE.nwletter-1)).innerHTML="",WORDLE.nwletter--),1===e.key.length&&e.key.toLowerCase()>="a"&&e.key.toLowerCase()<="z"&&WORDLE.nwletter-WORDLE.nwrow*WORDLE.wordlength<WORDLE.wordlength&&(document.getElementById(`nw${WORDLE.nwletter}`).innerHTML=e.key.toUpperCase(),WORDLE.nwletter++)}))}function resetGame(){voters=[],reset()}function updateLabel(e){switch(document.getElementById(`${e.id}label`).innerHTML=e.value,document.getElementById(e.id)!=e.value&&(document.getElementById(e.id).value=e.value),e.id){case"wordlength":WORDLE.wordlength=e.value;break;case"guesslimit":WORDLE.guesslimit=e.value;break;default:break}voters=[],WORDLE.words=[],WORDLE.wordList=[],document.getElementById("wordcount").innerHTML="Submitted words: 0",document.getElementById("nwoutput").innerHTML="",document.getElementById("nwoutput2").innerHTML="",WORDLE.nwletter=0,WORDLE.nwrow=0,WORDLE.nwword=[],WORDLE.nwusers="",shownw()}