const CLIENT_ID="qn0wimnszbqlwfnszdz3wwfz430eqr";let elements={grid:document.getElementById("grid"),gameDiv:document.getElementById("gameDiv"),loginExpiredModal:document.getElementById("loginExpiredModal"),loginExpiredRenew:document.getElementById("loginExpiredRenew"),loginExpiredReset:document.getElementById("loginExpiredReset"),howToPlayModal:document.getElementById("howToPlayModal"),aboutModal:document.getElementById("aboutModal"),vtsLink:document.getElementById("vtsLink"),status:document.getElementById("status"),topRight:document.getElementById("topRight"),loginButton:document.getElementById("loginButton"),channelName:document.getElementById("channelName"),connectbtn:document.getElementById("connectbtn"),darkTheme:document.getElementById("darkTheme"),toastContainer:document.getElementById("toastContainer")};const spinner='<div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>';let loginButton,loginExpiredModal,howToPlayModal,aboutModal,darkTheme=!0,USER={channel:"",twitchLogin:!1,access_token:"",userID:"",platform:""};function refreshData(){darkTheme=elements.darkTheme.checked??!0,USER.twitchLogin||(USER.channel=elements.channelName.value.replace(/\s+/g,"").toLowerCase(),USER.platform="twitch")}function saveSettings(){refreshData(),localStorage.setItem("USER",JSON.stringify(USER)),localStorage.setItem("darkTheme",darkTheme)}function load_localStorage(){localStorage.getItem("USER")&&(USER=JSON.parse(localStorage.getItem("USER")),elements.channelName.value=USER.channel)}function resetSettings(){return localStorage.setItem("USER",JSON.stringify({channel:"",twitchLogin:!1,access_token:"",userID:"",platform:""})),location.reload(),!1}function login(){return elements.topRight.innerHTML='<div class="btn-group" role="group" aria-label="log in button group">\n    <button type="button" class="btn btn-twitch"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></button>\n    <div class="btn-group" role="group">\n        <button id="btnGroupDropLogin" type="button" class="btn btn-twitch dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">\n      </button>\n        <ul class="dropdown-menu dropdown-menu-lg-end" aria-labelledby="btnGroupDrop1">\n            <li><a class="dropdown-item" onclick="logout()" href="#"><i class="material-icons notranslate">logout</i>Log out</a></li>\n        </ul>\n    </div>\n</div>',window.open("/prompt.html","loginWindow","toolbar=0,status=0,scrollbars=0,width=500px,height=800px"),!1}function connect(){elements.status.innerHTML='\n  <h4>\n  <span class="badge bg-warning">Connecting... \n  <div class="spinner-border" style="width:18px;height:18px;" role="status"><span class="visually-hidden">Loading...</span></div>\n  </span>\n  </h4>',elements.topRight.innerHTML='\n  <div class="btn-group" role="group" aria-label="log in button group">\n  <button type="button" class="btn btn-twitch"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></button>\n  <div class="btn-group" role="group">\n  <button id="btnGroupDropLogin" type="button" class="btn btn-twitch dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"></button>\n  <ul class="dropdown-menu dropdown-menu-lg-end" aria-labelledby="btnGroupDrop1">\n  <li><a class="dropdown-item" onclick="logout()" href="#"><i class="material-icons notranslate">logout</i>Log out</a></li>\n  </ul>\n  </div>\n  </div>',refreshData();let e={options:{clientId:CLIENT_ID,debug:!1},connection:{secure:!0,reconnect:!0},channels:[USER.channel]};client=new tmi.client(e),client.on("message",(async(e,t,n,o)=>{n.split(" ").filter(Boolean)[0].toLowerCase()})),client.on("timeout",((e,t,n,o,a)=>{})),client.on("connected",(async(e,t)=>{elements.status.innerHTML='<h4><span class="badge bg-success">Connected :)</span></h4>',saveSettings(),sendUsername("chat.vote/games/connect4",USER.channel,"twitch"==USER.platform?`twitch - ${USER.twitchLogin}`:"youtube"),await checkTags(USER.userID,USER.access_token)&&(elements.vtsLink.style.display=""),loadPFP()})),client.on("disconnected",(e=>{elements.status.innerHTML=`<h4><span class="badge bg-danger">Disconnected: ${e}</span></h4>`})),client.on("notice",((e,t,n)=>{elements.status.innerHTML=`<h4><span class="badge bg-danger">Disconnected: ${n}</span></h4>`})),client.connect().catch(console.error)}async function loadPFP(){if(!USER.channel)return void(elements.topRight.innerHTML=' <div class="btn-group" role="group" aria-label="login options">\n    <a\n      role="button"\n      id="loginButton"\n      class="btn btn-twitch"\n      tabindex="0"\n      data-bs-container="body"\n      data-bs-custom-class="custom-popover"\n      data-bs-placement="bottom"\n      data-bs-trigger="manual"\n      data-bs-toggle="popover"\n      data-bs-title="Not signed in"\n      data-bs-content="You need sign in first before adding options or enabling voting/suggestions"\n      ><span class="twitch-icon"></span>Sign in with Twitch</a\n    >\n    <div class="btn-group" role="group">\n      <button\n        id="btnGroupDropLogin"\n        type="button"\n        class="btn btn-twitch dropdown-toggle"\n        data-bs-toggle="dropdown"\n        data-bs-auto-close="outside"\n        aria-label="other login option, connect manually"\n        aria-expanded="false"\n      ></button>\n      <div class="dropdown-menu dropdown-menu-end" aria-labelledby="btnGroupDropLogin">\n        <div class="p-3" style="width: 300px">\n          <label for="channelName" class="form-label">Connect to chat directly</label>\n          <div class="input-group mb-3">\n            <span class="input-group-text" id="directLoginChannel">twitch.tv/</span>\n            <input type="text" class="form-control" id="channelName" aria-describedby="directLoginChannel" />\n          </div>\n          <small class="text-body-secondary">Some features will not be available if you connect directly</small><br />\n          <button type="button" id="connectbtn" class="btn btn-primary float-end">Connect</button>\n        </div>\n      </div>\n    </div>\n  </div>');let e=await get7TVPFP(USER.userID);"/pics/donk.png"==e&&USER.access_token&&(e=await getTwitchPFP(USER.channel,USER.access_token)),elements.topRight.innerHTML=`\n  <div class="btn-group" role="group" aria-label="Button group with nested dropdown">\n  <button type="button" id="btnGroupDrop2" class="btn btn-${darkTheme?"dark":"secondary"}"><img src="${e}" alt="profile pic" style="height:2em;"></button>\n  <div class="btn-group" role="group">\n  <button id="btnGroupDrop1" type="button" class="btn btn-${darkTheme?"dark":"secondary"} dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">\n  ${USER.channel}\n  </button>\n  <ul class="dropdown-menu dropdown-menu-lg-end" aria-labelledby="btnGroupDrop1">\n  <li><a class="dropdown-item" onclick="logout()" href="#"><i class="material-icons notranslate">logout</i>Log out</a></li>\n  </ul>\n  </div>\n  </div>`}function checkLogin(){return!!USER.channel||(loginButton.show(),setTimeout((function(){loginButton.hide()}),4e3),!1)}function logout(){elements.topRight.innerHTML=' <div class="btn-group" role="group" aria-label="login options">\n  <a\n    role="button"\n    id="loginButton"\n    class="btn btn-twitch"\n    tabindex="0"\n    data-bs-container="body"\n    data-bs-custom-class="custom-popover"\n    data-bs-placement="bottom"\n    data-bs-trigger="manual"\n    data-bs-toggle="popover"\n    data-bs-title="Not signed in"\n    data-bs-content="You need sign in first before adding options or enabling voting/suggestions"\n    ><span class="twitch-icon"></span>Sign in with Twitch</a\n  >\n  <div class="btn-group" role="group">\n    <button\n      id="btnGroupDropLogin"\n      type="button"\n      class="btn btn-twitch dropdown-toggle"\n      data-bs-toggle="dropdown"\n      data-bs-auto-close="outside"\n      aria-label="other login option, connect manually"\n      aria-expanded="false"\n    ></button>\n    <div class="dropdown-menu dropdown-menu-end" aria-labelledby="btnGroupDropLogin">\n      <div class="p-3" style="width: 300px">\n        <label for="channelName" class="form-label">Connect to chat directly</label>\n        <div class="input-group mb-3">\n          <span class="input-group-text" id="directLoginChannel">twitch.tv/</span>\n          <input type="text" class="form-control" id="channelName" aria-describedby="directLoginChannel" />\n        </div>\n        <small class="text-body-secondary">Some features will not be available if you connect directly</small><br />\n        <button type="button" id="connectbtn" class="btn btn-primary float-end">Connect</button>\n      </div>\n    </div>\n  </div>\n</div>',resetSettings()}function switchTheme(e){document.documentElement.setAttribute("data-bs-theme",e?"dark":"light"),document.getElementById("twitchLogo").style.filter=`invert(${e?.25:.65})`,document.getElementById("btnGroupDrop1")&&document.getElementById("btnGroupDrop2")&&(document.getElementById("btnGroupDrop1").classList.remove(""+(e?"btn-secondary":"btn-dark")),document.getElementById("btnGroupDrop1").classList.add(""+(e?"btn-dark":"btn-secondary")),document.getElementById("btnGroupDrop2").classList.remove(""+(e?"btn-secondary":"btn-dark")),document.getElementById("btnGroupDrop2").classList.add(""+(e?"btn-dark":"btn-secondary")))}async function loadAndConnect(){load_localStorage(),refreshData();const e=new Proxy(new URLSearchParams(window.location.search),{get:(e,t)=>e.get(t)});if(e.channel&&!USER.channel&&!USER.twitchLogin&&!USER.access_token&&!USER.userID){let t=e.channel.replace(/\s+/g,"").toLowerCase();elements.channelName.value=t,USER.channel=t,window.history.replaceState({},document.title,"/")}if(USER.twitchLogin&&!await checkToken(USER.access_token))return USER.channel="",void loginExpiredModal.show();USER.channel&&connect()}function toggleGrid(){elements.grid.style.display="none"==elements.grid.style.display?"":"none",elements.gameDiv.style.display=""==elements.gameDiv.style.display?"none":""}function showHowToPlay(){howToPlayModal.show()}window.onload=function(){darkTheme="true"===(localStorage.getItem("darkTheme")||"true"),elements.darkTheme.checked=darkTheme??!0,switchTheme(elements.darkTheme.checked),loadAndConnect(),USER.channel||(loginButton=new bootstrap.Popover(elements.loginButton)),loginExpiredModal=new bootstrap.Modal(elements.loginExpiredModal),howToPlayModal=new bootstrap.Modal(elements.howToPlayModal),aboutModal=new bootstrap.Modal(elements.aboutModal),enableTooltips(),enablePopovers(),elements.channelName.addEventListener("keydown",(e=>{"Enter"===e.key&&connect()})),elements.connectbtn.addEventListener("click",(function(){connect()})),elements.loginExpiredRenew.addEventListener("click",(function(){login()})),elements.loginButton.addEventListener("click",(function(){login()})),elements.loginExpiredReset.addEventListener("click",(function(){resetSettings()})),elements.darkTheme.onchange=function(){switchTheme(this.checked),saveSettings()},DONKHUNT.listeners()},window.onbeforeunload=function(){return null};class HuntUnit{constructor(e,t,n){if(!["hunter","target"].includes(e))throw new Error("Invalid type: "+e);this.type=e,this.cell=n,this.row=t}moveTo(e,t){DONKHUNT.field[this.row][this.cell]="",this.cell=t,this.row=e,DONKHUNT.field[this.row][this.cell]=this.type}}class HuntHunter extends HuntUnit{constructor(e,t){super("hunter",e,t)}isAbleToMove(){switch(this.row){case 0:return!1;case 1:return""===DONKHUNT.field[0][1];default:return""===DONKHUNT.field[this.row-1][this.cell]}}getValidMoveList(){if(!this.isAbleToMove())return[];switch(this.row){case 1:return[0,1];default:return[this.row-1,this.cell]}}}class HuntTarget extends HuntUnit{constructor(e,t){super("target",e,t)}getValidMoveList(){const e=[];switch(this.row){case 0:DONKHUNT.field[1].forEach(((t,n)=>e.push([1,n])));break;default:this.cell>0&&e.push([this.row,this.cell-1]),this.cell<2&&e.push([this.row,this.cell+1]),e.push([this.row+1,this.cell]),e.push([this.row-1,this.cell]),1===this.row&&e.push([0,1])}return e.filter((e=>""===DONKHUNT.field[e[0]][e[1]]))}}let DONKHUNT={consts:{MEGALUL:'<img src="/games/pics/megalul.png" alt="MEGALUL" class="icon">',DONK:'<img src="/games/pics/donk.png" alt="Donk" class="icon">',FEELSDONKMAN:'<img src="/games/pics/feelsdonkman.png" alt="FeelsDonkMan" class="icon">',CLAP:'<img src="/games/pics/clap.gif" alt="Clap" class="icon">',KNIFE:'<img src="/games/pics/forsenknife.png" alt="Knife" class="icon">',FORSENO:'<img src="/games/pics/forseno.png" alt="Real Forsen" class="icon">'},html:{fieldRows:Array.from(document.querySelectorAll("div#dhfield div.dh-field-row")).map((e=>Array.from(e.querySelectorAll("div.dh-field-cell")))),allSettingControls:Array.from(document.querySelectorAll(".dhsettings")),sidePicker:document.querySelector('input[name="dhplayer"]:checked').value,movePicker:document.querySelector('input[name="dhfirst"]:checked').value,startBtn:document.querySelector("#startdh"),gameResult:document.querySelector("#dhgameResult"),status:document.querySelector("#adviceFriend")},game:{hunters:[new HuntHunter(3,0),new HuntHunter(3,1),new HuntHunter(3,2)],target:new HuntTarget(2,0),turn:0,active:!1},player:{move1:null,side:null},field:[["wall","","wall"],["","",""],["","",""],["","",""],["","",""]],functions:{getHunterReference:function(e,t){let n=null;return DONKHUNT.game.hunters.forEach((o=>{o.row===e&&o.cell===t&&(n=o)})),n},whoGoes:function(){return DONKHUNT.game.turn%2?"hunter":"target"},resetField:function(){DONKHUNT.field[0][1]="",[1,2,3].forEach((e=>DONKHUNT.field[e].forEach(((e,t,n)=>n[t]="")))),DONKHUNT.game.hunters.forEach(((e,t)=>e.moveTo(3,t))),DONKHUNT.game.target.moveTo(2,1)},drawField:function(e=!1){if(DONKHUNT.html.fieldRows.forEach(((t,n)=>{t.forEach(((t,o)=>{t.classList.toggle("dh-p-wall","wall"===DONKHUNT.field[n][o]),t.classList.toggle("dh-p-hunter","hunter"===DONKHUNT.field[n][o]),t.classList.toggle("dh-p-target","target"===DONKHUNT.field[n][o]),t.classList.remove("dh-event-target"),e&&(t.classList.remove("dh-field-winpath"),t.classList.remove("dh-p-invert"))}))})),DONKHUNT.game.hunters.forEach((e=>{e.cell>DONKHUNT.game.target.cell&&DONKHUNT.html.fieldRows[e.row][e.cell].classList.add("dh-p-invert"),e.cell<DONKHUNT.game.target.cell&&DONKHUNT.html.fieldRows[e.row][e.cell].classList.remove("dh-p-invert")})),DONKHUNT.game.active&&DONKHUNT.functions.whoGoes()===DONKHUNT.player.side)switch(DONKHUNT.player.side){case"hunter":let e=0;DONKHUNT.game.hunters.forEach((t=>{t.isAbleToMove()&&(DONKHUNT.html.fieldRows[t.row][t.cell].classList.add("dh-event-target"),e+=1),t.cell>DONKHUNT.game.target.cell&&DONKHUNT.html.fieldRows[t.row][t.cell].classList.add("dh-p-invert"),t.cell<DONKHUNT.game.target.cell&&DONKHUNT.html.fieldRows[t.row][t.cell].classList.remove("dh-p-invert")})),e<1&&setTimeout((()=>{showToast("Hunters have no valid moves! Skipping turn.","warning",3e3),DONKHUNT.functions.turn(1)}),50);break;case"target":DONKHUNT.game.target.getValidMoveList().forEach((e=>{DONKHUNT.html.fieldRows[e[0]][e[1]].classList.add("dh-event-target")}));break}},turn:function(e=0){if(DONKHUNT.game.turn+=e,DONKHUNT.game.target.getValidMoveList().length<1)DONKHUNT.functions.endGame("hunter","Target is surrounded and cannot move");else{let e=!0;for(let t=DONKHUNT.game.target.row+1;t<DONKHUNT.field.length;t++)DONKHUNT.field[t][DONKHUNT.game.target.cell]&&(e=!1);if(e){for(let e=DONKHUNT.game.target.row;e<DONKHUNT.field.length;e++)DONKHUNT.html.fieldRows[e][DONKHUNT.game.target.cell].classList.add("dh-field-winpath");DONKHUNT.html.fieldRows[DONKHUNT.field.length-1][1].classList.add("dh-field-winpath"),DONKHUNT.functions.endGame("target","Target found a way to reach the flag")}}if(DONKHUNT.game.active){if(DONKHUNT.player.side===DONKHUNT.functions.whoGoes())switch(DONKHUNT.functions.whoGoes()){case"hunter":DONKHUNT.html.status.innerHTML=`Click a ${DONKHUNT.consts.MEGALUL} to move it forward.`;break;case"target":DONKHUNT.html.status.innerHTML=`Move ${DONKHUNT.consts.DONK} by clicking on a free cell.`;break}else DONKHUNT.html.status.innerText="Please wait for your opponent to move.",setTimeout(DONKHUNT.functions.emulateOpponentAction,2222);DONKHUNT.functions.drawField(0===DONKHUNT.game.turn)}else DONKHUNT.html.status.innerText='Press "Start new game" to begin'},endGame:function(e,t){switch(e){case"hunter":DONKHUNT.html.gameResult.querySelector("h2").innerHTML=`${DONKHUNT.consts.FORSENO}${DONKHUNT.consts.KNIFE} Hunters win!`,DONKHUNT.html.gameResult.querySelector("h4").innerText=t;break;case"target":DONKHUNT.html.gameResult.querySelector("h2").innerHTML=`${DONKHUNT.consts.FEELSDONKMAN}${DONKHUNT.consts.CLAP} Target wins!`,DONKHUNT.html.gameResult.querySelector("h4").innerText=t;break;default:DONKHUNT.html.gameResult.querySelector("h2").innerHTML=`${DONKHUNT.consts.DONK} Wait, what?`,DONKHUNT.html.gameResult.querySelector("h4").innerText=t||"Something went wrong, this should never hDONKHUNTen.";break}DONKHUNT.html.gameResult.style.visibility="visible",DONKHUNT.html.allSettingControls.forEach((e=>e.disabled=!1)),DONKHUNT.game.active=!1,DONKHUNT.functions.drawField()},emulateOpponentAction:function(){switch(DONKHUNT.functions.whoGoes()){case"hunter":const e=DONKHUNT.game.hunters.filter((e=>e.isAbleToMove()));if(e.length){let t=Math.floor(Math.random()*e.length);e[t].row>1?e[t].moveTo(e[t].row-1,e[t].cell):e[t].moveTo(0,1)}else showToast("Hunters have no valid moves - they skip their turn.","warning",3e3);break;case"target":const t=DONKHUNT.game.target.getValidMoveList();if(!t.length)return;let n=Math.floor(Math.random()*t.length);DONKHUNT.game.target.moveTo(t[n][0],t[n][1]);break}DONKHUNT.functions.turn(1)}},start:function(){DONKHUNT.html.gameResult.style.visibility="hidden",DONKHUNT.html.allSettingControls.forEach((e=>e.disabled=!0)),DONKHUNT.functions.resetField(),DONKHUNT.game.turn=0,DONKHUNT.player.side=DONKHUNT.html.sidePicker.value,DONKHUNT.game.active=!0,DONKHUNT.functions.turn("hunter"===DONKHUNT.html.movePicker.value?1:0),DONKHUNT.html.status.scrollIntoView()},reset:function(){DONKHUNT.html.gameResult.style.visibility="hidden",DONKHUNT.html.allSettingControls.forEach((e=>e.disabled=!1)),DONKHUNT.game.active=!1,DONKHUNT.functions.resetField(),DONKHUNT.functions.drawField()},listeners:function(){DONKHUNT.html.fieldRows.forEach((e=>e.forEach((e=>e.addEventListener("click",(function(e){if(!DONKHUNT.game.active)return;if(!e.target.classList.contains("dh-event-target"))return;if(DONKHUNT.player.side!=DONKHUNT.functions.whoGoes())return;const t={row:parseInt(e.target.parentNode.dataset.rowcount,10),cell:parseInt(e.target.dataset.colcount,10)};switch(DONKHUNT.field[t.row][t.cell]){case"hunter":const e=DONKHUNT.functions.getHunterReference(t.row,t.cell);if(!e.isAbleToMove())return;e.row>1?e.moveTo(e.row-1,e.cell):e.moveTo(0,1);break;default:DONKHUNT.game.target.getValidMoveList().forEach((e=>{e[0]==t.row&&e[1]==t.cell&&DONKHUNT.game.target.moveTo(e[0],e[1])}));break}DONKHUNT.functions.turn(1)}))))))}};