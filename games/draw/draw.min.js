const CLIENT_ID="qn0wimnszbqlwfnszdz3wwfz430eqr";let allEmotes={twitchglobal:[],bttvglobal:[],ffzglobal:[],seventvglobal:[],twitch:[],bttv:[],ffz:[],seventv:[],emoji:[]},elements={grid:document.getElementById("grid"),gameDiv:document.getElementById("gameDiv"),loginExpiredModal:document.getElementById("loginExpiredModal"),loginExpiredRenew:document.getElementById("loginExpiredRenew"),loginExpiredReset:document.getElementById("loginExpiredReset"),howToPlayModal:document.getElementById("howToPlayModal"),aboutModal:document.getElementById("aboutModal"),vtsLink:document.getElementById("vtsLink"),status:document.getElementById("status"),topRight:document.getElementById("topRight"),loginButton:document.getElementById("loginButton"),channelName:document.getElementById("channelName"),connectbtn:document.getElementById("connectbtn"),darkTheme:document.getElementById("darkTheme"),toastContainer:document.getElementById("toastContainer")};const spinner='<div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>';let loginButton,loginExpiredModal,howToPlayModal,aboutModal,darkTheme=!0,channelBadges={subscriber:[],bits:[]},globalBadges={},customBadges=[],USER={channel:"",twitchLogin:!1,access_token:"",userID:"",platform:""};async function refreshData(){darkTheme=elements.darkTheme.checked??!0,USER.twitchLogin||(USER.channel=elements.channelName.value.replace(/\s+/g,"").toLowerCase(),USER.platform="twitch"),!USER.userID&&USER.channel&&(USER.userID=await getUserID(USER.channel))}function saveSettings(){refreshData(),localStorage.setItem("USER",JSON.stringify(USER)),localStorage.setItem("darkTheme",darkTheme)}function load_localStorage(){localStorage.getItem("USER")&&(USER=JSON.parse(localStorage.getItem("USER")),elements.channelName.value=USER.channel)}function resetSettings(){return localStorage.setItem("USER",JSON.stringify({channel:"",twitchLogin:!1,access_token:"",userID:"",platform:""})),location.reload(),!1}function login(){return elements.topRight.innerHTML='<div class="btn-group" role="group" aria-label="log in button group">\n    <button type="button" class="btn btn-twitch"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></button>\n    <div class="btn-group" role="group">\n        <button id="btnGroupDropLogin" type="button" class="btn btn-twitch dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">\n      </button>\n        <ul class="dropdown-menu dropdown-menu-lg-end" aria-labelledby="btnGroupDrop1">\n            <li><a class="dropdown-item" onclick="logout()" href="#"><i class="material-icons notranslate">logout</i>Log out</a></li>\n        </ul>\n    </div>\n</div>',window.open("/prompt.html","loginWindow","toolbar=0,status=0,scrollbars=0,width=500px,height=800px"),!1}async function connect(){elements.status.innerHTML='\n  <h4>\n  <span class="badge bg-warning">Connecting... \n  <div class="spinner-border" style="width:18px;height:18px;" role="status"><span class="visually-hidden">Loading...</span></div>\n  </span>\n  </h4>',elements.topRight.innerHTML='\n  <div class="btn-group" role="group" aria-label="log in button group">\n  <button type="button" class="btn btn-twitch"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></button>\n  <div class="btn-group" role="group">\n  <button id="btnGroupDropLogin" type="button" class="btn btn-twitch dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"></button>\n  <ul class="dropdown-menu dropdown-menu-lg-end" aria-labelledby="btnGroupDrop1">\n  <li><a class="dropdown-item" onclick="logout()" href="#"><i class="material-icons notranslate">logout</i>Log out</a></li>\n  </ul>\n  </div>\n  </div>',refreshData(),allEmotes.twitch=await getChannelTwitchEmotes(USER.channel,!0),allEmotes.bttv=await getChannelBTTVEmotes(USER.userID,!0),allEmotes.ffz=await getChannelFFZEmotes(USER.userID,!0),allEmotes.seventv=await getChannel7TVEmotes(USER.userID,!0),document.getElementById("twitchdesc").innerHTML=`<br>${allEmotes.twitch.length} emotes`,document.getElementById("bttvdesc").innerHTML=`<br>${allEmotes.bttv.length} emotes`,document.getElementById("ffzdesc").innerHTML=`<br>${allEmotes.ffz.length} emotes`,document.getElementById("7tvdesc").innerHTML=`<br>${allEmotes.seventv.length} emotes`;let e={options:{clientId:CLIENT_ID,debug:!1},connection:{secure:!0,reconnect:!0},channels:[USER.channel]};client=new tmi.client(e),client.on("message",(async(e,t,n,o)=>{n===DRAW.drawanswer&&DRAW.correct({id:t["user-id"],username:t.username,displayname:t["display-name"],color:t.color,badges:t.badges,firstmsg:t["first-msg"]})})),client.on("timeout",((e,t,n,o,a)=>{})),client.on("connected",(async(e,t)=>{elements.status.innerHTML='<h4><span class="badge bg-success">Connected :)</span></h4>',saveSettings(),sendUsername("chat.vote/games/draw",USER.channel,"twitch"==USER.platform?`twitch - ${USER.twitchLogin}`:"youtube"),await checkTags(USER.userID,USER.access_token)&&(elements.vtsLink.style.display=""),loadPFP()})),client.on("disconnected",(e=>{elements.status.innerHTML=`<h4><span class="badge bg-danger">Disconnected: ${e}</span></h4>`})),client.on("notice",((e,t,n)=>{elements.status.innerHTML=`<h4><span class="badge bg-danger">Disconnected: ${n}</span></h4>`})),client.connect().catch(console.error)}async function loadPFP(){if(!USER.channel)return void(elements.topRight.innerHTML=' <div class="btn-group" role="group" aria-label="login options">\n    <a\n      role="button"\n      id="loginButton"\n      class="btn btn-twitch"\n      tabindex="0"\n      data-bs-container="body"\n      data-bs-custom-class="custom-popover"\n      data-bs-placement="bottom"\n      data-bs-trigger="manual"\n      data-bs-toggle="popover"\n      data-bs-title="Not signed in"\n      data-bs-content="You need sign in first before adding options or enabling voting/suggestions"\n      ><span class="twitch-icon"></span>Sign in with Twitch</a\n    >\n    <div class="btn-group" role="group">\n      <button\n        id="btnGroupDropLogin"\n        type="button"\n        class="btn btn-twitch dropdown-toggle"\n        data-bs-toggle="dropdown"\n        data-bs-auto-close="outside"\n        aria-label="other login option, connect manually"\n        aria-expanded="false"\n      ></button>\n      <div class="dropdown-menu dropdown-menu-end" aria-labelledby="btnGroupDropLogin">\n        <div class="p-3" style="width: 300px">\n          <label for="channelName" class="form-label">Connect to chat directly</label>\n          <div class="input-group mb-3">\n            <span class="input-group-text" id="directLoginChannel">twitch.tv/</span>\n            <input type="text" class="form-control" id="channelName" aria-describedby="directLoginChannel" />\n          </div>\n          <small class="text-body-secondary">Some features will not be available if you connect directly</small><br />\n          <button type="button" id="connectbtn" class="btn btn-primary float-end">Connect</button>\n        </div>\n      </div>\n    </div>\n  </div>');let e=await get7TVPFP(USER.userID);"/pics/donk.png"==e&&USER.access_token&&(e=await getTwitchPFP(USER.channel,USER.access_token)),elements.topRight.innerHTML=`\n  <div class="btn-group" role="group" aria-label="Button group with nested dropdown">\n  <button type="button" id="btnGroupDrop2" class="btn btn-${darkTheme?"dark":"secondary"}"><img src="${e}" alt="profile pic" style="height:2em;"></button>\n  <div class="btn-group" role="group">\n  <button id="btnGroupDrop1" type="button" class="btn btn-${darkTheme?"dark":"secondary"} dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">\n  ${USER.channel}\n  </button>\n  <ul class="dropdown-menu dropdown-menu-lg-end" aria-labelledby="btnGroupDrop1">\n  <li><a class="dropdown-item" onclick="logout()" href="#"><i class="material-icons notranslate">logout</i>Log out</a></li>\n  </ul>\n  </div>\n  </div>`}function checkLogin(){return!!USER.channel||(loginButton.show(),setTimeout((function(){loginButton.hide()}),4e3),!1)}function logout(){elements.topRight.innerHTML=' <div class="btn-group" role="group" aria-label="login options">\n  <a\n    role="button"\n    id="loginButton"\n    class="btn btn-twitch"\n    tabindex="0"\n    data-bs-container="body"\n    data-bs-custom-class="custom-popover"\n    data-bs-placement="bottom"\n    data-bs-trigger="manual"\n    data-bs-toggle="popover"\n    data-bs-title="Not signed in"\n    data-bs-content="You need sign in first before adding options or enabling voting/suggestions"\n    ><span class="twitch-icon"></span>Sign in with Twitch</a\n  >\n  <div class="btn-group" role="group">\n    <button\n      id="btnGroupDropLogin"\n      type="button"\n      class="btn btn-twitch dropdown-toggle"\n      data-bs-toggle="dropdown"\n      data-bs-auto-close="outside"\n      aria-label="other login option, connect manually"\n      aria-expanded="false"\n    ></button>\n    <div class="dropdown-menu dropdown-menu-end" aria-labelledby="btnGroupDropLogin">\n      <div class="p-3" style="width: 300px">\n        <label for="channelName" class="form-label">Connect to chat directly</label>\n        <div class="input-group mb-3">\n          <span class="input-group-text" id="directLoginChannel">twitch.tv/</span>\n          <input type="text" class="form-control" id="channelName" aria-describedby="directLoginChannel" />\n        </div>\n        <small class="text-body-secondary">Some features will not be available if you connect directly</small><br />\n        <button type="button" id="connectbtn" class="btn btn-primary float-end">Connect</button>\n      </div>\n    </div>\n  </div>\n</div>',resetSettings()}function switchTheme(e){document.documentElement.setAttribute("data-bs-theme",e?"dark":"light"),document.getElementById("twitchLogo").style.filter=`invert(${e?.25:.65})`,document.getElementById("btnGroupDrop1")&&document.getElementById("btnGroupDrop2")&&(document.getElementById("btnGroupDrop1").classList.remove(""+(e?"btn-secondary":"btn-dark")),document.getElementById("btnGroupDrop1").classList.add(""+(e?"btn-dark":"btn-secondary")),document.getElementById("btnGroupDrop2").classList.remove(""+(e?"btn-secondary":"btn-dark")),document.getElementById("btnGroupDrop2").classList.add(""+(e?"btn-dark":"btn-secondary")))}async function loadAndConnect(){load_localStorage(),refreshData();const e=new Proxy(new URLSearchParams(window.location.search),{get:(e,t)=>e.get(t)});if(e.channel&&!USER.channel&&!USER.twitchLogin&&!USER.access_token&&!USER.userID){let t=e.channel.replace(/\s+/g,"").toLowerCase();elements.channelName.value=t,USER.channel=t,window.history.replaceState({},document.title,"/")}if(USER.twitchLogin&&!await checkToken(USER.access_token))return USER.channel="",void loginExpiredModal.show();USER.channel&&connect()}function toggleGrid(){elements.grid.style.display="none"==elements.grid.style.display?"":"none",elements.gameDiv.style.display=""==elements.gameDiv.style.display?"none":""}function showHowToPlay(){howToPlayModal.show()}window.onload=async function(){darkTheme="true"===(localStorage.getItem("darkTheme")||"true"),elements.darkTheme.checked=darkTheme??!0,switchTheme(elements.darkTheme.checked),loadAndConnect(),USER.channel||(loginButton=new bootstrap.Popover(elements.loginButton)),loginExpiredModal=new bootstrap.Modal(elements.loginExpiredModal),howToPlayModal=new bootstrap.Modal(elements.howToPlayModal),aboutModal=new bootstrap.Modal(elements.aboutModal),enableTooltips(),enablePopovers(),elements.channelName.addEventListener("keydown",(e=>{"Enter"===e.key&&connect()})),elements.connectbtn.addEventListener("click",(function(){connect()})),elements.loginExpiredRenew.addEventListener("click",(function(){login()})),elements.loginButton.addEventListener("click",(function(){login()})),elements.loginExpiredReset.addEventListener("click",(function(){resetSettings()})),elements.darkTheme.onchange=function(){switchTheme(this.checked),saveSettings()},DRAW.listeners(),allEmotes.twitchglobal=await getGlobalTwitchEmotes(!0),allEmotes.bttvglobal=await getGlobalBTTVEmotes(!0),allEmotes.ffzglobal=await getGlobalFFZEmotes(!0),allEmotes.seventvglobal=await getGlobal7TVEmotes(!0),allEmotes.emoji=await getEmoji(),document.getElementById("twitchglobaldesc").innerHTML=`<br>${allEmotes.twitchglobal.length} emotes`,document.getElementById("bttvglobaldesc").innerHTML=`<br>${allEmotes.bttvglobal.length} emotes`,document.getElementById("ffzglobaldesc").innerHTML=`<br>${allEmotes.ffzglobal.length} emotes`,document.getElementById("7tvglobaldesc").innerHTML=`<br>${allEmotes.seventvglobal.length} emotes`,document.getElementById("emojidesc").innerHTML=`<br>${allEmotes.emoji.length} emoji`},window.onbeforeunload=function(){return null};let DRAW={drawanswer:"",drawanswerurl:"",drawanswerdesc:"",drawturn:0,winner:!1,canvas:null,redo_list:[],undo_list:[],state:null,twitchglobal:!1,bttvglobal:!1,ffzglobal:!1,seventvglobal:!1,twitch:!1,bttv:!1,ffz:!1,seventv:!1,emoji:!1,drawnotimelimit:!1,firstonly:!1,drawturnlength:60,drawpoints:10,drawpointswin:100,correctusers:0,users:{},usedEmotes:[],start:async function(){let e=[],t=[];DRAW.twitchglobal&&allEmotes.twitchglobal.forEach((t=>{e.push(t)})),DRAW.bttvglobal&&allEmotes.bttvglobal.forEach((t=>{e.push(t)})),DRAW.ffzglobal&&allEmotes.ffzglobal.forEach((t=>{e.push(t)})),DRAW.seventvglobal&&allEmotes.seventvglobal.forEach((t=>{e.push(t)})),DRAW.twitch&&allEmotes.twitch.forEach((t=>{e.push(t)})),DRAW.bttv&&allEmotes.bttv.forEach((t=>{e.push(t)})),DRAW.ffz&&allEmotes.ffz.forEach((t=>{e.push(t)})),DRAW.seventv&&allEmotes.seventv.forEach((t=>{e.push(t)})),DRAW.emoji&&allEmotes.emoji.forEach((t=>{e.push(t)})),DRAW.usedEmotes.forEach((t=>{e=e.filter((e=>e.name!==t))})),e.length<2?showToast("Not enough emotes selected","warning",3e3):(t.push(e[Math.floor(Math.random()*e.length)]),t.forEach((e=>{DRAW.usedEmotes.push(e.name)})),"emoji"==t[0].url?(document.getElementById("drawemotecardbody").innerHTML=`<div class="border border-secondary emote">\n            ${t[0].name}<br>\n            ${t[0].desc}\n            </div>`,DRAW.drawanswerdesc=t[0].desc,twemoji.parse(document.getElementById("drawemotecardbody"))):document.getElementById("drawemotecardbody").innerHTML=`<div class="border border-secondary emote">\n            <img src="${t[0].url}" alt="${t[0].name}" title="${t[0].name}"><br>\n            ${t[0].name}\n            </div>`,DRAW.drawanswer=t[0].name,DRAW.drawanswerurl=t[0].url,DRAW.canvas.clear(),document.getElementById("drawoutput").innerHTML="",DRAW.drawturn++,DRAW.winner=!1,DRAW.correctusers=0,0==Object.keys(globalBadges).length&&(globalBadges=await getGlobalBadges()),0==channelBadges.subscriber.length&&(channelBadges=await getChannelBadges(USER.channel)),0==customBadges.length&&(customBadges=await getCustomBadges()))},reroll:function(){DRAW.winner=!1,DRAW.correctusers=0;let e=[],t=[];DRAW.drawanswer="",document.getElementById("drawoutput").innerHTML="",DRAW.twitchglobal&&allEmotes.twitchglobal.forEach((t=>{e.push(t)})),DRAW.bttvglobal&&allEmotes.bttvglobal.forEach((t=>{e.push(t)})),DRAW.ffzglobal&&allEmotes.ffzglobal.forEach((t=>{e.push(t)})),DRAW.seventvglobal&&allEmotes.seventvglobal.forEach((t=>{e.push(t)})),DRAW.twitch&&allEmotes.twitch.forEach((t=>{e.push(t)})),DRAW.bttv&&allEmotes.bttv.forEach((t=>{e.push(t)})),DRAW.ffz&&allEmotes.ffz.forEach((t=>{e.push(t)})),DRAW.seventv&&allEmotes.seventv.forEach((t=>{e.push(t)})),DRAW.emoji&&allEmotes.emoji.forEach((t=>{e.push(t)})),DRAW.usedEmotes.forEach((t=>{e=e.filter((e=>e.name!==t))})),e.length<2?showToast("Not enough emotes selected","warning",3e3):(t.push(e[Math.floor(Math.random()*e.length)]),t.forEach((e=>{DRAW.usedEmotes.push(e.name)})),"emoji"==t[0].url?(document.getElementById("drawemotecardbody").innerHTML=`<div class="border border-secondary emote">\n            ${t[0].name}<br>\n            ${t[0].desc}\n            </div>`,DRAW.drawanswerdesc=t[0].desc,twemoji.parse(document.getElementById("drawemotecardbody"))):document.getElementById("drawemotecardbody").innerHTML=`<div class="border border-secondary emote">\n            <img src="${t[0].url}" alt="${t[0].name}" title="${t[0].name}"><br>\n            ${t[0].name}\n            </div>`,DRAW.drawanswer=t[0].name,DRAW.drawanswerurl=t[0].url,DRAW.canvas.clear())},correct:function(e){if(DRAW.correctusers>=DRAW.drawpoints)return showToast("No more points left; starting new round","warning",3e3),void DRAW.start();if(DRAW.users[e.username]){if(DRAW.users[e.username].lastTurn==DRAW.drawturn)return;if(DRAW.firstonly&&!DRAW.winner)DRAW.users[e.username].score+=DRAW.drawpoints,DRAW.users[e.username].lastTurn=DRAW.drawturn,DRAW.correctusers++;else{if(DRAW.firstonly)return;DRAW.users[e.username].score+=DRAW.drawpoints-DRAW.correctusers,DRAW.users[e.username].lastTurn=DRAW.drawturn,DRAW.correctusers++}}else{let t=e.username==e.displayname.toLowerCase()?`${e.displayname}`:`${e.displayname} (${e.username})`,n=e.color?e.color:"#FFFFFF",o=addBadges(e.badges,e.id,e.firstmsg);if(DRAW.firstonly&&!DRAW.winner)e.score=DRAW.drawpoints,e.lastTurn=DRAW.drawturn,e.badges=o,e.name=t,e.color=n,DRAW.users[e.username]=e,DRAW.correctusers++;else{if(DRAW.firstonly)return;e.score=DRAW.drawpoints-DRAW.correctusers,e.lastTurn=DRAW.drawturn,e.badges=o,e.name=t,e.color=n,DRAW.users[e.username]=e,DRAW.correctusers++}}let t="";Object.keys(DRAW.users).sort((function(e,t){return DRAW.users[t].score-DRAW.users[e].score})).forEach((e=>{t+=`<li id="${DRAW.users[e].name}_draw" class="list-group-item">${DRAW.users[e].badges}<span style="color:${DRAW.users[e].color};"> ${DRAW.users[e].name}</span>: ${DRAW.users[e].score} point </li>`})),document.getElementById("drawlblist").innerHTML=t,DRAW.winner||("emoji"==DRAW.drawanswerurl?(document.getElementById("drawoutput").innerHTML=`\n        <div class="card border-success">\n        <div class="card-body">\n        <h4>${e.username} was the first to get it right</h4><div class="border border-secondary emote"><br>\n        ${DRAW.drawanswer}<br>\n        ${DRAW.drawanswerdesc}\n        </div><br>\n        <button type="button" onclick="DRAW.start()" class="btn btn-success"><i class="material-icons notranslate">navigate_next</i>Next round</button>\n        </div>\n        </div>`,twemoji.parse(document.getElementById("drawoutput"))):document.getElementById("drawoutput").innerHTML=`\n        <div class="card border-success">\n        <div class="card-body">\n        <h4>${e.username} was the first to get it right</h4><div class="border border-secondary emote"><br>\n        <img src="${DRAW.drawanswerurl}" alt="${DRAW.drawanswer}" title="${DRAW.drawanswer}"><br>\n        ${DRAW.drawanswer}\n        </div><br>\n        <button type="button" onclick="DRAW.start()" class="btn btn-success"><i class="material-icons notranslate">navigate_next</i>Next round</button>\n        </div>\n        </div>`,DRAW.winner=!0)},reset:function(){DRAW.drawturn=0,DRAW.correctusers=0,DRAW.drawanswer="",document.getElementById("drawemotecardbody").innerHTML='<span style="font-size: 4vh;">Place your facecam here<br><i class="material-icons notranslate" style="font-size: 6vh;">photo_camera</i></span>',DRAW.drawnotimelimit=!1,DRAW.firstonly=!1,DRAW.drawturnlength=60,DRAW.drawpoints=10,DRAW.drawpointswin=100,document.getElementById("drawnotimelimit").checked=!1,document.getElementById("drawscoring1").checked=!0,document.getElementById("drawturnlength").value=60,document.getElementById("drawturnlength").disabled=!1,document.getElementById("drawturnlengthlabel").innerHTML="60",document.getElementById("drawpoints").value=10,document.getElementById("drawpointswin").value=100,DRAW.canvas.clear(),DRAW.redo_list=[],DRAW.undo_list=[],DRAW.users={},DRAW.state=null,document.getElementById("drawlblist").innerHTML="",DRAW.twitchglobal=!1,DRAW.bttvglobal=!1,DRAW.ffzglobal=!1,DRAW.seventvglobal=!1,DRAW.twitch=!1,DRAW.bttv=!1,DRAW.ffz=!1,DRAW.seventv=!1,DRAW.emoji=!1,document.getElementById("twitchglobal").checked=!1,document.getElementById("bttvglobal").checked=!1,document.getElementById("ffzglobal").checked=!1,document.getElementById("7tvglobal").checked=!1,document.getElementById("twitch").checked=!1,document.getElementById("bttv").checked=!1,document.getElementById("ffz").checked=!1,document.getElementById("7tv").checked=!1,document.getElementById("emoji").checked=!1,DRAW.usedEmotes=[]},changeColor:function(){DRAW.canvas.freeDrawingBrush.color=this.value,document.getElementById("drawing-color").value=this.value;let e=document.getElementsByClassName("brushsvg");Array.from(e).forEach((e=>{e.style.fill=this.value}))},changeBrush:function(e){DRAW.canvas.freeDrawingBrush.width=parseInt(e.value,10)||1,document.getElementById("drawing-line-width").value=parseInt(e.value,10)||1,document.getElementById("drawing-line-widthlabel").innerHTML=parseInt(e.value,10)||1},replay:function(e,t,n,o){t.push(DRAW.state),DRAW.state=e.pop();let a=document.getElementById(n),s=document.getElementById(o.id);a.disabled=!0,s.disabled=!0,DRAW.canvas.clear(),DRAW.canvas.loadFromJSON(DRAW.state,(function(){DRAW.canvas.renderAll(),a.disabled=!1,e.length&&(s.disabled=!1)}))},save:function(){DRAW.redo_list=[],document.getElementById("redo").disabled=!0,DRAW.state&&(DRAW.undo_list.push(DRAW.state),document.getElementById("undo").disabled=!1),DRAW.state=JSON.stringify(DRAW.canvas)},listeners:function(){DRAW.canvas=new fabric.Canvas("drawcanvas",{isDrawingMode:!0}),DRAW.canvas.on("mouse:up",(function(){DRAW.save()})),document.getElementById("undo").addEventListener("click",(function(){DRAW.replay(DRAW.undo_list,DRAW.redo_list,"redo",this)})),document.getElementById("redo").addEventListener("click",(function(){DRAW.replay(DRAW.redo_list,DRAW.undo_list,"undo",this)})),fabric.Object.prototype.transparentCorners=!1;let e=document.getElementById("drawing-color"),t=document.getElementById("drawing-line-width");document.getElementById("clear-canvas").onclick=function(){DRAW.canvas.clear()},e.oninput=function(){let e=DRAW.canvas.freeDrawingBrush;e.color=this.value,e.width=parseInt(t.value,10)||1;let n=document.getElementsByClassName("brushsvg");Array.from(n).forEach((e=>{e.style.fill=parseInt(this.value,10)}))},t.oninput=function(){document.getElementById("drawing-line-widthlabel").innerHTML=this.value,DRAW.canvas.freeDrawingBrush.width=parseInt(this.value,10)||1,this.previousSibling.innerHTML=parseInt(this.value,10)},document.getElementById("drawturnlength").oninput=function(){document.getElementById("drawturnlengthlabel").innerHTML=this.value},DRAW.canvas.freeDrawingBrush&&(DRAW.canvas.freeDrawingBrush.color=e.value,DRAW.canvas.freeDrawingBrush.width=parseInt(t.value,10)||1);let n=document.getElementsByClassName("colorpreset");Array.from(n).forEach((function(e){e.addEventListener("click",DRAW.changeColor)})),document.getElementById("twitchglobal").onchange=function(){DRAW.twitchglobal=this.checked},document.getElementById("bttvglobal").onchange=function(){DRAW.bttvglobal=this.checked},document.getElementById("ffzglobal").onchange=function(){DRAW.ffzglobal=this.checked},document.getElementById("7tvglobal").onchange=function(){DRAW.seventvglobal=this.checked},document.getElementById("twitch").onchange=function(){DRAW.twitch=this.checked},document.getElementById("bttv").onchange=function(){DRAW.bttv=this.checked},document.getElementById("ffz").onchange=function(){DRAW.ffz=this.checked},document.getElementById("7tv").onchange=function(){DRAW.seventv=this.checked},document.getElementById("emoji").onchange=function(){DRAW.emoji=this.checked},document.getElementById("drawturnlength").onchange=function(){DRAW.drawturnlength=parseInt(this.value,10)},document.getElementById("drawnotimelimit").onchange=function(){DRAW.drawnotimelimit=this.checked,document.getElementById("drawturnlength").disabled=this.checked},document.getElementById("drawscoring1").onchange=function(){DRAW.firstonly=!this.checked},document.getElementById("drawscoring2").onchange=function(){DRAW.firstonly=this.checked},document.getElementById("drawpoints").onchange=function(){DRAW.drawpoints=parseInt(this.value,10)},document.getElementById("drawpointswin").onchange=function(){DRAW.drawpointswin=parseInt(this.value,10)}}};function addBadges(e,t,n){try{let o="";n&&(o+='<i class="material-icons notranslate" style="color:#f18805;" title="First-time chatter">warning_amber</i>');for(let e=0;e<customBadges.length;e++)customBadges[e].users.includes(t)&&customBadges[e].sites.includes("chat.vote")&&(o+=`<img src="${customBadges[e].url}" class="chat-badge" title="${customBadges[e].name}"/>`);for(const t in e)if("subscriber"==t&&e.subscriber&&channelBadges.subscriber.length>0){o+=`<img src="${channelBadges.subscriber.find((t=>t.id===e.subscriber)).url}" class="chat-badge" title="Subscriber"/>`}else if("bits"==t&&channelBadges.bits.length>0){o+=`<img src="${channelBadges.bits.find((t=>t.id===e.bits)).url}" class="chat-badge" title="Bits"/>`}else if(Object.keys(globalBadges).length>0){o+=`<img src="${globalBadges[t].find((n=>n.id===e[t])).image_url_4x}" class="chat-badge" title="${t}"/>`}return o}catch(e){return""}}