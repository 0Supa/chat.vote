const CLIENT_ID="qn0wimnszbqlwfnszdz3wwfz430eqr";let streamersTurn=!0,voters=[],elements={grid:document.getElementById("grid"),gameDiv:document.getElementById("gameDiv"),loginExpiredModal:document.getElementById("loginExpiredModal"),loginExpiredRenew:document.getElementById("loginExpiredRenew"),loginExpiredReset:document.getElementById("loginExpiredReset"),howToPlayModal:document.getElementById("howToPlayModal"),aboutModal:document.getElementById("aboutModal"),vtsLink:document.getElementById("vtsLink"),status:document.getElementById("status"),topRight:document.getElementById("topRight"),loginButton:document.getElementById("loginButton"),channelName:document.getElementById("channelName"),connectbtn:document.getElementById("connectbtn"),darkTheme:document.getElementById("darkTheme"),toastContainer:document.getElementById("toastContainer")};const spinner='<div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>';let loginButton,loginExpiredModal,howToPlayModal,aboutModal,darkTheme=!0,USER={channel:"",twitchLogin:!1,access_token:"",userID:"",platform:""};function refreshData(){darkTheme=elements.darkTheme.checked??!0,USER.twitchLogin||(USER.channel=elements.channelName.value.replace(/\s+/g,"").toLowerCase(),USER.platform="twitch")}function saveSettings(){refreshData(),localStorage.setItem("USER",JSON.stringify(USER)),localStorage.setItem("darkTheme",darkTheme)}function load_localStorage(){localStorage.getItem("USER")&&(USER=JSON.parse(localStorage.getItem("USER")),elements.channelName.value=USER.channel)}function resetSettings(){return localStorage.setItem("USER",JSON.stringify({channel:"",twitchLogin:!1,access_token:"",userID:"",platform:""})),location.reload(),!1}function login(){return elements.topRight.innerHTML='<div class="btn-group" role="group" aria-label="log in button group">\n    <button type="button" class="btn btn-twitch"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></button>\n    <div class="btn-group" role="group">\n        <button id="btnGroupDropLogin" type="button" class="btn btn-twitch dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">\n      </button>\n        <ul class="dropdown-menu dropdown-menu-lg-end" aria-labelledby="btnGroupDrop1">\n            <li><a class="dropdown-item" onclick="logout()" href="#"><i class="material-icons notranslate">logout</i>Log out</a></li>\n        </ul>\n    </div>\n</div>',window.open("/prompt.html","loginWindow","toolbar=0,status=0,scrollbars=0,width=500px,height=800px"),!1}function connect(){elements.status.innerHTML='\n  <h4>\n  <span class="badge bg-warning">Connecting... \n  <div class="spinner-border" style="width:18px;height:18px;" role="status"><span class="visually-hidden">Loading...</span></div>\n  </span>\n  </h4>',elements.topRight.innerHTML='\n  <div class="btn-group" role="group" aria-label="log in button group">\n  <button type="button" class="btn btn-twitch"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></button>\n  <div class="btn-group" role="group">\n  <button id="btnGroupDropLogin" type="button" class="btn btn-twitch dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"></button>\n  <ul class="dropdown-menu dropdown-menu-lg-end" aria-labelledby="btnGroupDrop1">\n  <li><a class="dropdown-item" onclick="logout()" href="#"><i class="material-icons notranslate">logout</i>Log out</a></li>\n  </ul>\n  </div>\n  </div>',refreshData();let e={options:{clientId:CLIENT_ID,debug:!1},connection:{secure:!0,reconnect:!0},channels:[USER.channel]};client=new tmi.client(e),client.on("message",(async(e,t,n,a)=>{let o=n.split(" ").filter(Boolean);if(streamersTurn)return;let l=parseInt(o[0],10);if(!isNaN(l)&&l>0&&l<10&&!voters.includes(t.username)){if(TTT.gameBoard[l-1])return;voters.push(t.username);let e=TTT.results.findIndex((e=>e.label==l));return TTT.results[e].data+=1,void updateGraph("ttt")}})),client.on("timeout",((e,t,n,a,o)=>{})),client.on("connected",(async(e,t)=>{elements.status.innerHTML='<h4><span class="badge bg-success">Connected :)</span></h4>',saveSettings(),sendUsername("chat.vote/games/tictactoe",USER.channel,"twitch"==USER.platform?`twitch - ${USER.twitchLogin}`:"youtube"),await checkTags(USER.userID,USER.access_token)&&(elements.vtsLink.style.display=""),loadPFP()})),client.on("disconnected",(e=>{elements.status.innerHTML=`<h4><span class="badge bg-danger">Disconnected: ${e}</span></h4>`})),client.on("notice",((e,t,n)=>{elements.status.innerHTML=`<h4><span class="badge bg-danger">Disconnected: ${n}</span></h4>`})),client.connect().catch(console.error)}async function loadPFP(){if(!USER.channel)return void(elements.topRight.innerHTML=' <div class="btn-group" role="group" aria-label="login options">\n    <a\n      role="button"\n      id="loginButton"\n      class="btn btn-twitch"\n      tabindex="0"\n      data-bs-container="body"\n      data-bs-custom-class="custom-popover"\n      data-bs-placement="bottom"\n      data-bs-trigger="manual"\n      data-bs-toggle="popover"\n      data-bs-title="Not signed in"\n      data-bs-content="You need sign in first before adding options or enabling voting/suggestions"\n      ><span class="twitch-icon"></span>Sign in with Twitch</a\n    >\n    <div class="btn-group" role="group">\n      <button\n        id="btnGroupDropLogin"\n        type="button"\n        class="btn btn-twitch dropdown-toggle"\n        data-bs-toggle="dropdown"\n        data-bs-auto-close="outside"\n        aria-label="other login option, connect manually"\n        aria-expanded="false"\n      ></button>\n      <div class="dropdown-menu dropdown-menu-end" aria-labelledby="btnGroupDropLogin">\n        <div class="p-3" style="width: 300px">\n          <label for="channelName" class="form-label">Connect to chat directly</label>\n          <div class="input-group mb-3">\n            <span class="input-group-text" id="directLoginChannel">twitch.tv/</span>\n            <input type="text" class="form-control" id="channelName" aria-describedby="directLoginChannel" />\n          </div>\n          <small class="text-body-secondary">Some features will not be available if you connect directly</small><br />\n          <button type="button" id="connectbtn" class="btn btn-primary float-end">Connect</button>\n        </div>\n      </div>\n    </div>\n  </div>');let e=await get7TVPFP(USER.userID);"/pics/donk.png"==e&&USER.access_token&&(e=await getTwitchPFP(USER.channel,USER.access_token)),elements.topRight.innerHTML=`\n  <div class="btn-group" role="group" aria-label="Button group with nested dropdown">\n  <button type="button" id="btnGroupDrop2" class="btn btn-${darkTheme?"dark":"secondary"}"><img src="${e}" alt="profile pic" style="height:2em;"></button>\n  <div class="btn-group" role="group">\n  <button id="btnGroupDrop1" type="button" class="btn btn-${darkTheme?"dark":"secondary"} dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">\n  ${USER.channel}\n  </button>\n  <ul class="dropdown-menu dropdown-menu-lg-end" aria-labelledby="btnGroupDrop1">\n  <li><a class="dropdown-item" onclick="logout()" href="#"><i class="material-icons notranslate">logout</i>Log out</a></li>\n  </ul>\n  </div>\n  </div>`}function checkLogin(){return!!USER.channel||(loginButton.show(),setTimeout((function(){loginButton.hide()}),4e3),!1)}function logout(){elements.topRight.innerHTML=' <div class="btn-group" role="group" aria-label="login options">\n  <a\n    role="button"\n    id="loginButton"\n    class="btn btn-twitch"\n    tabindex="0"\n    data-bs-container="body"\n    data-bs-custom-class="custom-popover"\n    data-bs-placement="bottom"\n    data-bs-trigger="manual"\n    data-bs-toggle="popover"\n    data-bs-title="Not signed in"\n    data-bs-content="You need sign in first before adding options or enabling voting/suggestions"\n    ><span class="twitch-icon"></span>Sign in with Twitch</a\n  >\n  <div class="btn-group" role="group">\n    <button\n      id="btnGroupDropLogin"\n      type="button"\n      class="btn btn-twitch dropdown-toggle"\n      data-bs-toggle="dropdown"\n      data-bs-auto-close="outside"\n      aria-label="other login option, connect manually"\n      aria-expanded="false"\n    ></button>\n    <div class="dropdown-menu dropdown-menu-end" aria-labelledby="btnGroupDropLogin">\n      <div class="p-3" style="width: 300px">\n        <label for="channelName" class="form-label">Connect to chat directly</label>\n        <div class="input-group mb-3">\n          <span class="input-group-text" id="directLoginChannel">twitch.tv/</span>\n          <input type="text" class="form-control" id="channelName" aria-describedby="directLoginChannel" />\n        </div>\n        <small class="text-body-secondary">Some features will not be available if you connect directly</small><br />\n        <button type="button" id="connectbtn" class="btn btn-primary float-end">Connect</button>\n      </div>\n    </div>\n  </div>\n</div>',resetSettings()}function switchTheme(e){document.documentElement.setAttribute("data-bs-theme",e?"dark":"light"),document.getElementById("twitchLogo").style.filter=`invert(${e?.25:.65})`,document.getElementById("btnGroupDrop1")&&document.getElementById("btnGroupDrop2")&&(document.getElementById("btnGroupDrop1").classList.remove(""+(e?"btn-secondary":"btn-dark")),document.getElementById("btnGroupDrop1").classList.add(""+(e?"btn-dark":"btn-secondary")),document.getElementById("btnGroupDrop2").classList.remove(""+(e?"btn-secondary":"btn-dark")),document.getElementById("btnGroupDrop2").classList.add(""+(e?"btn-dark":"btn-secondary")))}async function loadAndConnect(){load_localStorage(),refreshData();const e=new Proxy(new URLSearchParams(window.location.search),{get:(e,t)=>e.get(t)});if(e.channel&&!USER.channel&&!USER.twitchLogin&&!USER.access_token&&!USER.userID){let t=e.channel.replace(/\s+/g,"").toLowerCase();elements.channelName.value=t,USER.channel=t,window.history.replaceState({},document.title,"/")}if(USER.twitchLogin&&!await checkToken(USER.access_token))return USER.channel="",void loginExpiredModal.show();USER.channel&&connect()}function toggleGrid(){elements.grid.style.display="none"==elements.grid.style.display?"":"none",elements.gameDiv.style.display=""==elements.gameDiv.style.display?"none":""}function showHowToPlay(){howToPlayModal.show()}function switchGame(e){switch(e){case"draw":location.href="/games/draw";break;case"arena":location.href="/games/arena";break;case"eb":location.href="/games/emotes";break;case"dh":location.href="/games/donkhunt";break;case"shapes":location.href="/games/shapes";break;case"nim":location.href="/games/nim";break;case"nw":location.href="/games/wordle";break;case"c4":location.href="/games/connect4";break;case"ttt":location.href="/games/tictactoe";break;case"about":aboutModal.show();break;default:break}}function initGraph(){TTT.chart&&TTT.chart.destroy(),TTT.chart=new Chart(TTT.ctx,{type:"bar",data:{labels:["1 - 0 Votes (0%)","2 - 0 Votes (0%)","3 - 0 Votes (0%)","4 - 0 Votes (0%)","5 - 0 Votes (0%)","6 - 0 Votes (0%)","7 - 0 Votes (0%)","8 - 0 Votes (0%)","9 - 0 Votes (0%)"],datasets:[{label:"score",data:[],borderWidth:2}]},options:{indexAxis:"y",maintainAspectRatio:!1,scales:{x:{ticks:{color:"white"},beginAtZero:!0},y:{ticks:{textStrokeColor:"rgba(0,0,0,1)",textStrokeWidth:3,color:"white",mirror:!0,font:{size:32},z:1},beginAtZero:!0}},plugins:{tooltip:{enabled:!1},legend:{display:!1}}}})}function updateGraph(){let e,t,n,a;e=TTT.results.map((e=>e.label)),t=TTT.results.map((e=>e.data)),n=TTT.results.map((e=>e.c1)),a=TTT.results.map((e=>e.c2));let o=[],l=0;for(let l=0;l<t.length;l++)o.push({data:t[l],label:e[l],c1:n[l],c2:a[l]});for(let s=0;s<o.length;s++)t[s]=o[s].data,e[s]=`${o[s].label} - ${o[s].data} ${1==o[s].data?"Vote":"Votes"} (${Math.round(o[s].data/voters.length*100)||0}%)`,n[s]=o[s].c1,a[s]=o[s].c2,l+=o[s].data;document.getElementById("totalvotesttt").innerHTML=`Total votes: ${l}`,TTT.chart.data.labels=e,TTT.chart.data.datasets.forEach((e=>{e.data=t,e.backgroundColor=n,e.borderColor=a})),TTT.chart.update()}window.onload=function(){darkTheme="true"===(localStorage.getItem("darkTheme")||"true"),elements.darkTheme.checked=darkTheme??!0,switchTheme(elements.darkTheme.checked),loadAndConnect(),USER.channel||(loginButton=new bootstrap.Popover(elements.loginButton)),loginExpiredModal=new bootstrap.Modal(elements.loginExpiredModal),howToPlayModal=new bootstrap.Modal(elements.howToPlayModal),aboutModal=new bootstrap.Modal(elements.aboutModal),enableTooltips(),enablePopovers(),elements.channelName.addEventListener("keydown",(e=>{"Enter"===e.key&&connect()})),elements.connectbtn.addEventListener("click",(function(){connect()})),elements.loginExpiredRenew.addEventListener("click",(function(){login()})),elements.loginButton.addEventListener("click",(function(){login()})),elements.loginExpiredReset.addEventListener("click",(function(){resetSettings()})),elements.darkTheme.onchange=function(){switchTheme(this.checked),saveSettings()},initGraph(),TTT.listeners(),document.getElementById("tttoverlay").innerHTML=`<span class="overlaytext">${USER.channel||"STREAMER"}'s turn</span>`},window.onbeforeunload=function(){return null};let TTT={chart:null,isComputerPlaying:!1,isGameOver:!1,numberOfPlayedSquares:0,gameBoard:[null,null,null,null,null,null,null,null,null],squares:$(".square"),ctx:document.getElementById("tttchartCanvas").getContext("2d"),results:[{label:"1",data:0,c1:"#f44336",c2:"#f53337"},{label:"2",data:0,c1:"#f4c236",c2:"#f5c237"},{label:"3",data:0,c1:"#a8f436",c2:"#a9e437"},{label:"4",data:0,c1:"#36f443",c2:"#37e444"},{label:"5",data:0,c1:"#36f4c2",c2:"#37e4c3"},{label:"6",data:0,c1:"#36a8f4",c2:"#3798f5"},{label:"7",data:0,c1:"#4336f4",c2:"#4426f5"},{label:"8",data:0,c1:"#a236d4",c2:"#a326d5"},{label:"9",data:0,c1:"#f336b8",c2:"#f426b9"}],winningCombos:[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]],updateGameBoard:function(e,t,n){TTT.gameBoard[e]=t,n.html(t);let a=document.getElementsByClassName("choices");for(let e=0,t=a.length;e<t;e++)a[e].innerHTML=0,TTT.gameBoard[e]&&$(a[e]).parent().addClass("text-body-secondary")},reset:function(){TTT.init(),document.getElementById("totalvotesttt").innerHTML="Total votes: 0",document.getElementById("tttoutput").innerHTML="",document.getElementById("tttchartCanvas").classList="blur",document.getElementById("tttoverlay").innerHTML=`<span class="overlaytext">${USER.channel||"STREAMER"}'s turn</span>`,TTT.results=[{label:"1",data:0,c1:"#f44336",c2:"#f53337"},{label:"2",data:0,c1:"#f4c236",c2:"#f5c237"},{label:"3",data:0,c1:"#a8f436",c2:"#a9e437"},{label:"4",data:0,c1:"#36f443",c2:"#37e444"},{label:"5",data:0,c1:"#36f4c2",c2:"#37e4c3"},{label:"6",data:0,c1:"#36a8f4",c2:"#3798f5"},{label:"7",data:0,c1:"#4336f4",c2:"#4426f5"},{label:"8",data:0,c1:"#a236d4",c2:"#a326d5"},{label:"9",data:0,c1:"#f336b8",c2:"#f426b9"}]},init:function(){for(let e=0,t=TTT.squares.length;e<t;e++)TTT.squares[e].innerHTML=`<span class="text-body-secondary">${e+1}</span>`;TTT.gameBoard=[null,null,null,null,null,null,null,null,null],TTT.isComputerPlaying=!1,TTT.isGameOver=!1,TTT.numberOfPlayedSquares=0,document.getElementById("gameboard").classList="pointer"},checkWin:function(e){let t=!1;for(let n=0,a=TTT.winningCombos.length;n<a;n++){let a=TTT.winningCombos[n][0],o=TTT.winningCombos[n][1],l=TTT.winningCombos[n][2];TTT.gameBoard[a]===TTT.gameBoard[o]&&TTT.gameBoard[o]===TTT.gameBoard[l]&&TTT.gameBoard[a]&&(TTT.endGame(e),t=!0)}return t},endGame:function(e){document.getElementById("tttoutput").innerHTML="X"===e?`${USER.channel} wins<br> <button type="button" onclick="resetGame()" class="btn btn-primary">Play again</button>`:"O"===e?'Chat wins<br> <button type="button" onclick="resetGame()" class="btn btn-primary">Play again</button>':'Draw<br> <button type="button" onclick="resetGame()" class="btn btn-primary">Play again</button>',TTT.isGameOver=!0},getChatMove:function(){let e=TTT.results;return e.sort((function(e,t){return e.data>t.data?-1:e.data==t.data?0:1})),e[0]},playTurn:function(){if(0==voters.length)return;streamersTurn=!0,document.getElementById("tttchartCanvas").classList="blur",document.getElementById("tttoverlay").innerHTML=`<span class="overlaytext">${USER.channel||"STREAMER"}'s turn</span>`,voters=[];let e=TTT.getChatMove();e=e.label,TTT.results=TTT.results.filter((function(t){return t.label!=e})),TTT.results.forEach(((e,t)=>{TTT.results[t].data=0})),TTT.results.sort((function(e,t){return parseInt(e.label,10)<parseInt(t.label,10)?-1:parseInt(e.label,10)==parseInt(t.label,10)?0:1})),updateGraph("ttt");let t=$(".square-0"+(parseInt(e,10)-1));TTT.numberOfPlayedSquares++,TTT.updateGameBoard(""+(parseInt(e,10)-1),"O",t),TTT.checkWin("O"),TTT.isComputerPlaying=!1,document.getElementById("gameboard").classList="cursorpointer",document.getElementById("totalvotesttt").innerHTML="Total votes: 0"},listeners:function(){TTT.squares.click((function(){voters=[];let e=parseInt($(this).data("index"),10);if(document.getElementById("gameboard").classList="cursordefault",!TTT.isGameOver&&!TTT.isComputerPlaying&&(!TTT.gameBoard[e]||void 0)){streamersTurn=!1,document.getElementById("tttchartCanvas").classList="",document.getElementById("tttoverlay").innerHTML="",TTT.updateGameBoard(e,"X",$(this)),TTT.numberOfPlayedSquares++,!TTT.checkWin("X")&&TTT.numberOfPlayedSquares<9||9===TTT.numberOfPlayedSquares&&TTT.endGame("draw"),TTT.isComputerPlaying=!0,TTT.results=TTT.results.filter((function(t){return t.label!=`${e+1}`})),TTT.results.forEach(((e,t)=>{TTT.results[t].data=0})),updateGraph("ttt")}}))}};function resetGame(){voters=[],initGraph(),streamersTurn=!0,TTT.reset()}