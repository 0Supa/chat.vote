const CLIENT_ID="qn0wimnszbqlwfnszdz3wwfz430eqr";let voters=[],elements={grid:document.getElementById("grid"),gameDiv:document.getElementById("gameDiv"),loginExpiredModal:document.getElementById("loginExpiredModal"),loginExpiredRenew:document.getElementById("loginExpiredRenew"),loginExpiredReset:document.getElementById("loginExpiredReset"),aboutModal:document.getElementById("aboutModal"),vtsLink:document.getElementById("vtsLink"),status:document.getElementById("status"),topRight:document.getElementById("topRight"),loginButton:document.getElementById("loginButton"),channelName:document.getElementById("channelName"),connectbtn:document.getElementById("connectbtn"),darkTheme:document.getElementById("darkTheme"),toastContainer:document.getElementById("toastContainer")};const spinner='<div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>';let loginButton,loginExpiredModal,aboutModal,darkTheme=!0,USER={channel:"",twitchLogin:!1,access_token:"",userID:"",platform:""};function refreshData(){darkTheme=elements.darkTheme.checked??!0,USER.twitchLogin||(USER.channel=elements.channelName.value.replace(/\s+/g,"").toLowerCase(),USER.platform="twitch")}function saveSettings(){refreshData(),localStorage.setItem("USER",JSON.stringify(USER)),localStorage.setItem("darkTheme",darkTheme)}function load_localStorage(){localStorage.getItem("USER")&&(USER=JSON.parse(localStorage.getItem("USER")),elements.channelName.value=USER.channel)}function resetSettings(){return localStorage.setItem("USER",JSON.stringify({channel:"",twitchLogin:!1,access_token:"",userID:"",platform:""})),location.reload(),!1}function login(){return elements.topRight.innerHTML='<div class="btn-group" role="group" aria-label="log in button group">\n    <button type="button" class="btn btn-twitch"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></button>\n    <div class="btn-group" role="group">\n        <button id="btnGroupDropLogin" type="button" class="btn btn-twitch dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">\n      </button>\n        <ul class="dropdown-menu dropdown-menu-lg-end" aria-labelledby="btnGroupDrop1">\n            <li><a class="dropdown-item" onclick="logout()" href="#"><i class="material-icons notranslate">logout</i>Log out</a></li>\n        </ul>\n    </div>\n</div>',window.open("/prompt.html","loginWindow","toolbar=0,status=0,scrollbars=0,width=500px,height=800px"),!1}function connect(){elements.status.innerHTML='\n  <h4>\n  <span class="badge bg-warning">Connecting... \n  <div class="spinner-border" style="width:18px;height:18px;" role="status"><span class="visually-hidden">Loading...</span></div>\n  </span>\n  </h4>',elements.topRight.innerHTML='\n  <div class="btn-group" role="group" aria-label="log in button group">\n  <button type="button" class="btn btn-twitch"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></button>\n  <div class="btn-group" role="group">\n  <button id="btnGroupDropLogin" type="button" class="btn btn-twitch dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"></button>\n  <ul class="dropdown-menu dropdown-menu-lg-end" aria-labelledby="btnGroupDrop1">\n  <li><a class="dropdown-item" onclick="logout()" href="#"><i class="material-icons notranslate">logout</i>Log out</a></li>\n  </ul>\n  </div>\n  </div>',refreshData();let e={options:{clientId:CLIENT_ID,debug:!1},connection:{secure:!0,reconnect:!0},channels:[USER.channel]};client=new tmi.client(e),client.on("message",(async(e,t,n,a)=>{let s=n.split(" ").filter(Boolean),l=parseInt(s[0],10);if(!isNaN(l)&&l>0&&l<4&&!voters.includes(t.username)){voters.push(t.username);let e=SHAPES.results.findIndex((e=>e.label==l));return SHAPES.results[e].data+=1,void updateGraph("shapes")}})),client.on("timeout",((e,t,n,a,s)=>{})),client.on("connected",(async(e,t)=>{elements.status.innerHTML='<h4><span class="badge bg-success">Connected :)</span></h4>',saveSettings(),sendUsername("chat.vote/games/shapes",USER.channel,"twitch"==USER.platform?`twitch - ${USER.twitchLogin}`:"youtube"),await checkTags(USER.userID,USER.access_token)&&(elements.vtsLink.style.display=""),loadPFP()})),client.on("disconnected",(e=>{elements.status.innerHTML=`<h4><span class="badge bg-danger">Disconnected: ${e}</span></h4>`})),client.on("notice",((e,t,n)=>{elements.status.innerHTML=`<h4><span class="badge bg-danger">Disconnected: ${n}</span></h4>`})),client.connect().catch(console.error)}async function loadPFP(){if(!USER.channel)return void(elements.topRight.innerHTML=' <div class="btn-group" role="group" aria-label="login options">\n    <a\n      role="button"\n      id="loginButton"\n      class="btn btn-twitch"\n      tabindex="0"\n      data-bs-container="body"\n      data-bs-custom-class="custom-popover"\n      data-bs-placement="bottom"\n      data-bs-trigger="manual"\n      data-bs-toggle="popover"\n      data-bs-title="Not signed in"\n      data-bs-content="You need sign in first before adding options or enabling voting/suggestions"\n      ><span class="twitch-icon"></span>Sign in with Twitch</a\n    >\n    <div class="btn-group" role="group">\n      <button\n        id="btnGroupDropLogin"\n        type="button"\n        class="btn btn-twitch dropdown-toggle"\n        data-bs-toggle="dropdown"\n        data-bs-auto-close="outside"\n        aria-label="other login option, connect manually"\n        aria-expanded="false"\n      ></button>\n      <div class="dropdown-menu dropdown-menu-end" aria-labelledby="btnGroupDropLogin">\n        <div class="p-3" style="width: 300px">\n          <label for="channelName" class="form-label">Connect to chat directly</label>\n          <div class="input-group mb-3">\n            <span class="input-group-text" id="directLoginChannel">twitch.tv/</span>\n            <input type="text" class="form-control" id="channelName" aria-describedby="directLoginChannel" />\n          </div>\n          <small class="text-body-secondary">Some features will not be available if you connect directly</small><br />\n          <button type="button" id="connectbtn" class="btn btn-primary float-end">Connect</button>\n        </div>\n      </div>\n    </div>\n  </div>');let e=await get7TVPFP(USER.userID);"/pics/donk.png"==e&&USER.access_token&&(e=await getTwitchPFP(USER.channel,USER.access_token)),elements.topRight.innerHTML=`\n  <div class="btn-group" role="group" aria-label="Button group with nested dropdown">\n  <button type="button" id="btnGroupDrop2" class="btn btn-${darkTheme?"dark":"secondary"}"><img src="${e}" alt="profile pic" style="height:2em;"></button>\n  <div class="btn-group" role="group">\n  <button id="btnGroupDrop1" type="button" class="btn btn-${darkTheme?"dark":"secondary"} dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">\n  ${USER.channel}\n  </button>\n  <ul class="dropdown-menu dropdown-menu-lg-end" aria-labelledby="btnGroupDrop1">\n  <li><a class="dropdown-item" onclick="logout()" href="#"><i class="material-icons notranslate">logout</i>Log out</a></li>\n  </ul>\n  </div>\n  </div>`}function checkLogin(){return!!USER.channel||(loginButton.show(),setTimeout((function(){loginButton.hide()}),4e3),!1)}function logout(){elements.topRight.innerHTML=' <div class="btn-group" role="group" aria-label="login options">\n  <a\n    role="button"\n    id="loginButton"\n    class="btn btn-twitch"\n    tabindex="0"\n    data-bs-container="body"\n    data-bs-custom-class="custom-popover"\n    data-bs-placement="bottom"\n    data-bs-trigger="manual"\n    data-bs-toggle="popover"\n    data-bs-title="Not signed in"\n    data-bs-content="You need sign in first before adding options or enabling voting/suggestions"\n    ><span class="twitch-icon"></span>Sign in with Twitch</a\n  >\n  <div class="btn-group" role="group">\n    <button\n      id="btnGroupDropLogin"\n      type="button"\n      class="btn btn-twitch dropdown-toggle"\n      data-bs-toggle="dropdown"\n      data-bs-auto-close="outside"\n      aria-label="other login option, connect manually"\n      aria-expanded="false"\n    ></button>\n    <div class="dropdown-menu dropdown-menu-end" aria-labelledby="btnGroupDropLogin">\n      <div class="p-3" style="width: 300px">\n        <label for="channelName" class="form-label">Connect to chat directly</label>\n        <div class="input-group mb-3">\n          <span class="input-group-text" id="directLoginChannel">twitch.tv/</span>\n          <input type="text" class="form-control" id="channelName" aria-describedby="directLoginChannel" />\n        </div>\n        <small class="text-body-secondary">Some features will not be available if you connect directly</small><br />\n        <button type="button" id="connectbtn" class="btn btn-primary float-end">Connect</button>\n      </div>\n    </div>\n  </div>\n</div>',resetSettings()}function switchTheme(e){document.documentElement.setAttribute("data-bs-theme",e?"dark":"light"),document.getElementById("twitchLogo").style.filter=`invert(${e?.25:.65})`,document.getElementById("btnGroupDrop1")&&document.getElementById("btnGroupDrop2")&&(document.getElementById("btnGroupDrop1").classList.remove(""+(e?"btn-secondary":"btn-dark")),document.getElementById("btnGroupDrop1").classList.add(""+(e?"btn-dark":"btn-secondary")),document.getElementById("btnGroupDrop2").classList.remove(""+(e?"btn-secondary":"btn-dark")),document.getElementById("btnGroupDrop2").classList.add(""+(e?"btn-dark":"btn-secondary")))}async function loadAndConnect(){load_localStorage(),refreshData();const e=new Proxy(new URLSearchParams(window.location.search),{get:(e,t)=>e.get(t)});if(e.channel&&!USER.channel&&!USER.twitchLogin&&!USER.access_token&&!USER.userID){let t=e.channel.replace(/\s+/g,"").toLowerCase();elements.channelName.value=t,USER.channel=t,window.history.replaceState({},document.title,"/")}if(USER.twitchLogin&&!await checkToken(USER.access_token))return USER.channel="",void loginExpiredModal.show();USER.channel&&connect()}function toggleGrid(){elements.grid.style.display="none"==elements.grid.style.display?"":"none",elements.gameDiv.style.display=""==elements.gameDiv.style.display?"none":""}function initGraph(){SHAPES.chart&&SHAPES.chart.destroy(),SHAPES.chart=new Chart(SHAPES.ctx,{type:"bar",data:{labels:["1 - 0 Votes (0%)","2 - 0 Votes (0%)","3 - 0 Votes (0%)"],datasets:[{label:"score",data:[],borderWidth:2}]},options:{indexAxis:"y",maintainAspectRatio:!1,scales:{x:{ticks:{color:"white"},beginAtZero:!0},y:{ticks:{textStrokeColor:"rgba(0,0,0,1)",textStrokeWidth:3,color:"white",mirror:!0,font:{size:32},z:1},beginAtZero:!0}},plugins:{tooltip:{enabled:!1},legend:{display:!1}}}})}function updateGraph(){let e,t,n,a;e=SHAPES.results.map((e=>e.label)),t=SHAPES.results.map((e=>e.data)),n=SHAPES.results.map((e=>e.c1)),a=SHAPES.results.map((e=>e.c2));let s=[],l=0;for(let l=0;l<t.length;l++)s.push({data:t[l],label:e[l],c1:n[l],c2:a[l]});for(let o=0;o<s.length;o++)t[o]=s[o].data,e[o]=`${s[o].label} - ${s[o].data} ${1==s[o].data?"Vote":"Votes"} (${Math.round(s[o].data/voters.length*100)||0}%)`,n[o]=s[o].c1,a[o]=s[o].c2,l+=s[o].data;document.getElementById("totalvotesshapes").innerHTML=`Total votes: ${l}`,SHAPES.chart.data.labels=e,SHAPES.chart.data.datasets.forEach((e=>{e.data=t,e.backgroundColor=n,e.borderColor=a})),SHAPES.chart.update()}window.onload=function(){darkTheme="true"===(localStorage.getItem("darkTheme")||"true"),elements.darkTheme.checked=darkTheme??!0,switchTheme(elements.darkTheme.checked),loadAndConnect(),USER.channel||(loginButton=new bootstrap.Popover(elements.loginButton)),loginExpiredModal=new bootstrap.Modal(elements.loginExpiredModal),aboutModal=new bootstrap.Modal(elements.aboutModal),enableTooltips(),enablePopovers(),elements.channelName.addEventListener("keydown",(e=>{"Enter"===e.key&&connect()})),elements.connectbtn.addEventListener("click",(function(){connect()})),elements.loginExpiredRenew.addEventListener("click",(function(){login()})),elements.loginButton.addEventListener("click",(function(){login()})),elements.loginExpiredReset.addEventListener("click",(function(){resetSettings()})),elements.darkTheme.onchange=function(){switchTheme(this.checked),saveSettings()},initGraph(),listeners()},window.onbeforeunload=function(){return null};let SHAPES={figureList:Array.from(document.querySelectorAll("#field div.figure")),optionList:Array.from(document.querySelectorAll("#variants div.figure")),startBtn:document.querySelector("#startshapesbtn"),dVariants:document.querySelector("#variants"),dResult:document.querySelector("#shapesgameResult"),dDifficulty:document.querySelector("select#difficulty"),lives:document.querySelector("#lives"),ctx:document.getElementById("shapeschartCanvas").getContext("2d"),chart:null,results:[{label:"1",data:0,c1:"#f44336",c2:"#f53337"},{label:"2",data:0,c1:"#f4c236",c2:"#f5c237"},{label:"3",data:0,c1:"#a8f436",c2:"#a9e437"}],shapesGame:{figs:[],choices:[],correct:-1,lives:0,difficulty:0,rule:null,gameStarted:!1}};function drawShapes(){SHAPES.figureList.forEach(((e,t)=>{const n=SHAPES.shapesGame.figs[t];e.classList="figure",n?(e.classList.add(n.size?"big":"small"),e.classList.add(n.type?"circle":"square2"),e.classList.add(n.color?"blue":"red")):(e.classList="figure unknown",t==SHAPES.shapesGame.figs.length&&e.classList.add("next"))})),SHAPES.shapesGame.gameStarted&&(SHAPES.optionList.forEach(((e,t)=>{const n=SHAPES.shapesGame.choices[t];e.classList="figure option",e.classList.add(n.size?"big":"small"),e.classList.add(n.type?"circle":"square2"),e.classList.add(n.color?"blue":"red"),n.isKnownToBeIncorrect()&&e.classList.add("unpickable")})),SHAPES.dVariants.style.visibility="visible",SHAPES.lives.innerHTML=`Lives: ${"❤".repeat(parseInt(SHAPES.shapesGame.lives,10))}`)}function generateChoices(){SHAPES.shapesGame.choices=new Array(3).fill(null),SHAPES.shapesGame.correct=Math.floor(Math.random()*SHAPES.shapesGame.choices.length),SHAPES.shapesGame.choices[SHAPES.shapesGame.correct]=SHAPES.shapesGame.rule.gen(SHAPES.shapesGame.figs[SHAPES.shapesGame.figs.length-1]);for(let e=0;e<SHAPES.shapesGame.choices.length;e++)for(;!SHAPES.shapesGame.choices[e];){let t=SHAPES.shapesGame.rule.fake(SHAPES.shapesGame.figs[SHAPES.shapesGame.figs.length-1]);SHAPES.shapesGame.choices.every((e=>!t.isEqual(e)))&&(SHAPES.shapesGame.choices[e]=t)}}function endGame(e=!1){SHAPES.lives.innerHTML="Lives: 💀",SHAPES.shapesGame.gameStarted=!1,document.querySelector("#endMessage").innerText=e?"Congrats! You've filled the row!":"YOU LOST! Wow, you are so bad at this game!",document.querySelector("#rule").innerText=SHAPES.shapesGame.rule.desc,SHAPES.dVariants.style.visibility="hidden",SHAPES.dResult.style.visibility="visible",SHAPES.startBtn.disabled=!1,SHAPES.dDifficulty.disabled=!1}function makeChoice(e){if(SHAPES.shapesGame.gameStarted)try{if(e.target.classList.contains("unpickable"))return;const t=parseInt(e.target.dataset.choice,10);t!==SHAPES.shapesGame.correct?(SHAPES.results=SHAPES.results.filter((function(e){return parseInt(e.label,10)!=t+1})),updateGraph("shapes"),SHAPES.shapesGame.lives-=1,SHAPES.shapesGame.choices[t].isKnownToBeIncorrect(!0),showToast("Incorrect choice!","danger",3e3),SHAPES.shapesGame.lives<1&&endGame(!1)):(SHAPES.results=[{label:"1",data:0,c1:"#f44336",c2:"#f53337"},{label:"2",data:0,c1:"#f4c236",c2:"#f5c237"},{label:"3",data:0,c1:"#a8f436",c2:"#a9e437"}],updateGraph("shapes"),SHAPES.shapesGame.figs.push(SHAPES.shapesGame.choices[SHAPES.shapesGame.correct]),SHAPES.shapesGame.figs.length>=SHAPES.figureList.length?endGame(!0):generateChoices()),drawShapes()}catch(e){}}function start(){SHAPES.dResult.style.visibility="hidden",SHAPES.startBtn.disabled=!0,SHAPES.dDifficulty.disabled=!0,SHAPES.shapesGame.difficulty=parseInt(SHAPES.dDifficulty.value,10)||0,SHAPES.shapesGame.lives=3-SHAPES.shapesGame.difficulty;const e=rules[Object.keys(rules)[SHAPES.shapesGame.difficulty]];SHAPES.shapesGame.rule=e[Math.floor(Math.random()*e.length)],SHAPES.shapesGame.figs.length=0,SHAPES.shapesGame.figs.push(new Figure);for(let e=1;e<3;e++)SHAPES.shapesGame.figs.push(SHAPES.shapesGame.rule.gen(SHAPES.shapesGame.figs[SHAPES.shapesGame.figs.length-1]));SHAPES.shapesGame.gameStarted=!0,generateChoices(),drawShapes(),SHAPES.results=[{label:"1",data:0,c1:"#f44336",c2:"#f53337"},{label:"2",data:0,c1:"#f4c236",c2:"#f5c237"},{label:"3",data:0,c1:"#a8f436",c2:"#a9e437"}],updateGraph("shapes")}function reset(){SHAPES.dResult.style.visibility="hidden",SHAPES.startBtn.disabled=!1,SHAPES.dDifficulty.disabled=!1,SHAPES.shapesGame={figs:[],choices:[],correct:-1,lives:0,difficulty:0,rule:null,gameStarted:!1},SHAPES.results=[{label:"1",data:0,c1:"#f44336",c2:"#f53337"},{label:"2",data:0,c1:"#f4c236",c2:"#f5c237"},{label:"3",data:0,c1:"#a8f436",c2:"#a9e437"}]}function playTurn(){let e=SHAPES.results;e.sort((function(e,t){return e.data>t.data?-1:e.data==t.data?0:1})),SHAPES.optionList[parseInt(e[0].label,10)-1].click(),voters=[];for(let e=0;e<SHAPES.results.length;e++)SHAPES.results[e].data=0;SHAPES.results.sort((function(e,t){return parseInt(e.label,10)<parseInt(t.label,10)?-1:parseInt(e.label,10)==parseInt(t.label,10)?0:1})),updateGraph("shapes")}function listeners(){document.getElementById("difficulty").onchange=function(){document.getElementById("lives").innerHTML=`Lives: ${"❤".repeat(3-parseInt(this.value,10))}`},SHAPES.optionList.forEach((e=>e.addEventListener("click",makeChoice))),document.getElementById("shapeslength").oninput=function(){document.getElementById("shapeslengthlabel").innerHTML=this.value}}class Figure{constructor(e,t,n){this.type=Boolean(null===e?Math.round(Math.random()):e),this.color=Boolean(null===t?Math.round(Math.random()):t),this.size=Boolean(null===n?Math.round(Math.random()):n)}isEqual(e){return!!e&&(this.type===e.type&&this.color===e.color&&this.size===e.size)}isKnownToBeIncorrect(e=!1){return e&&(this.isBad=!0),this.isBad||!1}}const rules={easy:[{desc:"Next figure must be of SAME COLOR as the last one",fake:e=>new Figure(null,!e.color,null),gen:e=>new Figure(null,e.color,null)},{desc:"Next figure must be of SAME SIZE as the last one",fake:e=>new Figure(null,null,!e.size),gen:e=>new Figure(null,null,e.size)},{desc:"Next figure must be of SAME SHAPE as the last one",fake:e=>new Figure(!e.type,null,null),gen:e=>new Figure(e.type,null,null)},{desc:"Next figure must be of DIFFERENT COLOR than the last one",fake:e=>new Figure(null,e.color,null),gen:e=>new Figure(null,!e.color,null)},{desc:"Next figure must be of DIFFERENT SIZE than the last one",fake:e=>new Figure(null,null,e.size),gen:e=>new Figure(null,null,!e.size)},{desc:"Next figure must be of DIFFERENT SHAPE than the last one",fake:e=>new Figure(e.type,null,null),gen:e=>new Figure(!e.type,null,null)}],normal:[{desc:"If last shape was SMALL, next one has to be BLUE, otherwise - RED",fake:e=>new Figure(null,e.size,null),gen:e=>new Figure(null,!e.size,null)},{desc:"If last shape was BIG, next one has to be SQUARE, otherwise - CIRCLE",fake:e=>new Figure(e.size,null,null),gen:e=>new Figure(!e.size,null,null)},{desc:"If last shape was BLUE, next one has to be CIRCLE, otherwise - SQUARE",fake:e=>new Figure(!e.color,null,null),gen:e=>new Figure(e.color,null,null)},{desc:"If last shape was CIRCLE, next one has to be BIG, otherwise - SMALL",fake:e=>new Figure(null,null,!e.type),gen:e=>new Figure(null,null,e.type)},{desc:"If last shape was BLUE, next one has to be SMALL, otherwise - BIG",fake:e=>new Figure(null,null,e.color),gen:e=>new Figure(null,null,!e.color)},{desc:"If last shape was CIRCLE, next one has to be SMALL, otherwise - BIG",fake:e=>new Figure(null,null,e.type),gen:e=>new Figure(null,null,!e.type)}],hard:[{desc:"If last shape was BIG, next one has to be BLUE, otherwise - of SAME TYPE as last shape",fake:e=>new Figure(e.size?null:!e.type,!e.size&&null,null),gen:e=>new Figure(e.size?null:e.type,!!e.size||null,null)},{desc:"If last shape was BIG, next one has to be BLUE, otherwise - of DIFFERENT COLOR than the last shape",fake:e=>new Figure(null,!e.size&&e.color,null),gen:e=>new Figure(null,!!e.size||!e.color,null)},{desc:"If last shape was BLUE, next one has to be BIG, otherwise - of DIFFERENT TYPE than the last shape",fake:e=>new Figure(e.color?null:e.type,null,!e.color&&null),gen:e=>new Figure(e.color?null:!e.type,null,!!e.color||null)},{desc:"If last shape was RED, next one has to be CIRCLE, otherwise - SMALL",fake:e=>new Figure(!!e.color&&null,null,!!e.color||null),gen:e=>new Figure(!e.color||null,null,!e.color&&null)}]};